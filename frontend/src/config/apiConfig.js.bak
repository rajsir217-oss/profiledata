/**
 * API Configuration
 * Environment-specific configuration for all backend API URLs
 * Supports: local, docker, dev, stage, pod (production)
 */

// Environment-specific backend URLs
const ENVIRONMENT_URLS = {
  local: {
    backend: 'http://localhost:8000',
    api: 'http://localhost:8000/api/users',
    ws: 'ws://localhost:8000'
  },
  docker: {
    backend: 'http://backend:8000',
    api: 'http://backend:8000/api/users',
    ws: 'ws://backend:8000'
  },
  dev: {
    backend: process.env.REACT_APP_DEV_BACKEND_URL || 'https://dev-api.yourdomain.com',
    api: process.env.REACT_APP_DEV_API_URL || 'https://dev-api.yourdomain.com/api/users',
    ws: process.env.REACT_APP_DEV_WS_URL || 'wss://dev-api.yourdomain.com'
  },
  stage: {
    backend: process.env.REACT_APP_STAGE_BACKEND_URL || 'https://stage-api.yourdomain.com',
    api: process.env.REACT_APP_STAGE_API_URL || 'https://stage-api.yourdomain.com/api/users',
    ws: process.env.REACT_APP_STAGE_WS_URL || 'wss://stage-api.yourdomain.com'
  },
  pod: {
    backend: process.env.REACT_APP_POD_BACKEND_URL || 'https://matrimonial-backend-7cxoxmouuq-uc.a.run.app',
    api: process.env.REACT_APP_POD_API_URL || 'https://matrimonial-backend-7cxoxmouuq-uc.a.run.app/api/users',
    ws: process.env.REACT_APP_POD_WS_URL || 'wss://matrimonial-backend-458052696267.us-central1.run.app'
  }
};

// Detect current environment
export const getCurrentEnvironment = () => {
  const hostname = window.location.hostname;
  
  // Priority 1: FORCE localhost detection (highest priority for local development)
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    console.log('🔧 FORCED LOCAL ENVIRONMENT - localhost detected');
    return 'local';
  }
  
  console.log('🔍 ENVIRONMENT DEBUG:', {
    hostname: hostname,
    REACT_APP_ENVIRONMENT: process.env.REACT_APP_ENVIRONMENT,
    RUNTIME_CONFIG: window.RUNTIME_CONFIG?.ENVIRONMENT
  });
  
  // Priority 2: Runtime config override (for manual override)
  if (window.RUNTIME_CONFIG?.ENVIRONMENT) {
    console.log('✅ Using runtime config:', window.RUNTIME_CONFIG.ENVIRONMENT);
    return window.RUNTIME_CONFIG.ENVIRONMENT;
  }
  
  // Priority 3: Build-time environment variable
  if (process.env.REACT_APP_ENVIRONMENT) {
    console.log('✅ Using REACT_APP_ENVIRONMENT:', process.env.REACT_APP_ENVIRONMENT);
    return process.env.REACT_APP_ENVIRONMENT;
  }
  
  // Priority 4: Detect from hostname patterns
  if (hostname.includes('dev')) {
    return 'dev';
  } else if (hostname.includes('stage') || hostname.includes('staging')) {
    return 'stage';
  } else if (hostname.includes('docker') || hostname === 'frontend') {
    return 'docker';
  }
  
  // Priority 5: Production (pod) as final fallback
  console.warn('⚠️ Defaulting to pod environment!');
  return 'pod';
};

// Get configuration for current environment
const getEnvironmentConfig = () => {
  const env = getCurrentEnvironment();
  return ENVIRONMENT_URLS[env] || ENVIRONMENT_URLS.local;
};

// Get base backend URL
export const getBackendUrl = () => {
  // Priority 1: Runtime config override (for manual override)
  if (window.RUNTIME_CONFIG?.SOCKET_URL) {
    return window.RUNTIME_CONFIG.SOCKET_URL;
  }
  
  // Priority 2: Direct env var override
  if (process.env.REACT_APP_SOCKET_URL) {
    return process.env.REACT_APP_SOCKET_URL;
  }
  
  // Priority 3: Environment-specific config
  return getEnvironmentConfig().backend;
};

// Get API base URL (for /api/users endpoints)
export const getApiUrl = () => {
  // Priority 1: Runtime config override
  if (window.RUNTIME_CONFIG?.API_URL) {
    return window.RUNTIME_CONFIG.API_URL;
  }
  
  // Priority 2: Direct env var override
  if (process.env.REACT_APP_API_URL) {
    return process.env.REACT_APP_API_URL;
  }
  
  // Priority 3: Environment-specific config
  return getEnvironmentConfig().api;
};

// Get WebSocket URL
export const getWebSocketUrl = () => {
  // Priority 1: Runtime config override
  if (window.RUNTIME_CONFIG?.WS_URL) {
    return window.RUNTIME_CONFIG.WS_URL;
  }
  
  // Priority 2: Direct env var override
  if (process.env.REACT_APP_WS_URL) {
    return process.env.REACT_APP_WS_URL;
  }
  
  // Priority 3: Environment-specific config
  return getEnvironmentConfig().ws;
};

// Export constants for common use
export const API_BASE_URL = getApiUrl();
export const BACKEND_URL = getBackendUrl();

// Helper to build full API URLs
export const buildApiUrl = (path) => {
  const base = getBackendUrl();
  // Remove leading slash if present
  const cleanPath = path.startsWith('/') ? path.slice(1) : path;
  return `${base}/${cleanPath}`;
};

// Specific API endpoints
export const API_ENDPOINTS = {
  // Auth
  LOGIN: `${API_BASE_URL}/login`,
  REGISTER: `${API_BASE_URL}/register`,
  
  // Users
  USERS: API_BASE_URL,
  ONLINE_STATUS: (username, status) => `${API_BASE_URL}/online-status/${username}/${status}`,
  
  // Notifications
  NOTIFICATIONS: `${getBackendUrl()}/api/notifications`,
  NOTIFICATION_TEMPLATES: `${getBackendUrl()}/api/notifications/templates`,
  NOTIFICATION_QUEUE: `${getBackendUrl()}/api/notifications/queue`,
  NOTIFICATION_LOGS: `${getBackendUrl()}/api/notifications/logs`,
  NOTIFICATION_SCHEDULED: `${getBackendUrl()}/api/notifications/scheduled`,
  NOTIFICATION_ANALYTICS: `${getBackendUrl()}/api/notifications/analytics`,
  NOTIFICATION_SEND: `${getBackendUrl()}/api/notifications/send`,
  
  // Admin
  ADMIN_META: (username) => `${getBackendUrl()}/api/admin/meta/${username}`,
  ADMIN_META_VERIFY: `${getBackendUrl()}/api/admin/meta/verify`,
  
  // Contact
  CONTACT_DOWNLOAD: (ticketId, filename) => 
    `${API_BASE_URL}/contact/download/${ticketId}/${filename}`,
  
  // Auth (separate endpoint)
  AUTH: `${getBackendUrl()}/api/auth`,
  CHANGE_PASSWORD: `${getBackendUrl()}/api/auth/change-password`,
  
  // Image access
  IMAGE_ACCESS: `${getBackendUrl()}/api/users/image-access`,
};

const apiConfig = {
  getBackendUrl,
  getApiUrl,
  buildApiUrl,
  API_BASE_URL,
  BACKEND_URL,
  API_ENDPOINTS,
};

export default apiConfig;

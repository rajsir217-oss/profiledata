import React, { useState, useEffect } from 'react';
import './Preferences.css';
import { getUserPreferences, updateUserPreferences, changePassword } from '../api';
import api from '../api';

const Preferences = () => {
  const [selectedTheme, setSelectedTheme] = useState('light-blue');
  const [showSaveMessage, setShowSaveMessage] = useState(false);
  const [fadeOut, setFadeOut] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('theme');
  const [isAdmin, setIsAdmin] = useState(false);
  
  // Admin Settings State
  const [ticketDeleteDays, setTicketDeleteDays] = useState(30);
  const [savingTicketSettings, setSavingTicketSettings] = useState(false);
  const [ticketSettingsMessage, setTicketSettingsMessage] = useState({ type: '', text: '' });
  const [showTooltip, setShowTooltip] = useState(false);
  const [adminSettingsLoading, setAdminSettingsLoading] = useState(false);
  
  // Password change state
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [passwordMessage, setPasswordMessage] = useState({ type: '', text: '' });
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });

  const themes = [
    {
      id: 'light-blue',
      name: 'Cozy Light',
      icon: '‚òÄÔ∏è',
      description: 'Warm and inviting light theme with soft colors',
      preview: {
        primary: '#6366f1',
        secondary: '#a78bfa',
        background: '#fffbf7',
        text: '#374151'
      }
    },
    {
      id: 'dark',
      name: 'Cozy Night',
      icon: 'üåô',
      description: 'Warm purple dark mode for comfortable evening browsing',
      preview: {
        primary: '#a78bfa',
        secondary: '#c4b5fd',
        background: '#1a1625',
        text: '#e5e7eb'
      }
    },
    {
      id: 'light-pink',
      name: 'Cozy Rose',
      icon: 'üå∏',
      description: 'Soft rose theme with gentle pink accents',
      preview: {
        primary: '#ec4899',
        secondary: '#f9a8d4',
        background: '#fdf2f8',
        text: '#4a5568'
      }
    },
    {
      id: 'light-gray',
      name: 'Light Gray',
      icon: '‚ö°',
      description: 'Clean neutral gray theme for minimal distraction',
      preview: {
        primary: '#64748b',
        secondary: '#94a3b8',
        background: '#f8fafc',
        text: '#1e293b'
      }
    },
    {
      id: 'ultra-light-gray',
      name: 'Ultra Light Gray',
      icon: '‚ú®',
      description: 'Ultra minimal gray theme with maximum whitespace',
      preview: {
        primary: '#475569',
        secondary: '#64748b',
        background: '#fcfcfd',
        text: '#0f172a'
      }
    },
    {
      id: 'ultra-light-green',
      name: 'Ultra Light Green',
      icon: 'üçÉ',
      description: 'Fresh green theme with natural tones',
      preview: {
        primary: '#10b981',
        secondary: '#34d399',
        background: '#f0fdf4',
        text: '#064e3b'
      }
    },
    {
      id: 'ultra-black',
      name: 'Ultra Black',
      icon: 'üåë',
      description: 'Pure OLED black theme with vibrant neon accents',
      preview: {
        primary: '#00d4ff',
        secondary: '#7c3aed',
        background: '#000000',
        text: '#e5e5e5'
      }
    }
  ];

  // Apply theme function
  const applyTheme = (themeId) => {
    // Apply the theme to the body element
    document.body.className = `theme-${themeId}`;
    
    // Also update the root CSS variables
    const root = document.documentElement;
    const theme = themes.find(t => t.id === themeId);
    if (theme) {
      root.style.setProperty('--primary-color', theme.preview.primary);
      root.style.setProperty('--secondary-color', theme.preview.secondary);
      root.style.setProperty('--background-color', theme.preview.background);
      root.style.setProperty('--text-color', theme.preview.text);
    }
  };

  // Load theme from API on mount
  useEffect(() => {
    const loadPreferences = async () => {
      try {
        const username = localStorage.getItem('username');
        setCurrentUser(username);
        
        const prefs = await getUserPreferences(username);
        const theme = prefs?.themePreference || 'light-blue';
        setSelectedTheme(theme);
        applyTheme(theme);
      } catch (error) {
        console.error('Error loading preferences:', error);
        // If there's an error, apply default theme
        applyTheme('light-blue');
      } finally {
        setIsLoading(false);
      }
    };

    loadPreferences();
    checkAdminStatus();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const checkAdminStatus = () => {
    const username = localStorage.getItem('username');
    console.log('üîç Checking admin status - Username from localStorage:', username);
    console.log('üîç Is Admin?', username === 'admin');
    setIsAdmin(username === 'admin');
  };

  const loadAdminSettings = async () => {
    try {
      setAdminSettingsLoading(true);
      const response = await api.get('/system-settings');
      const days = response.data.ticket_delete_days;
      setTicketDeleteDays(days !== undefined && days !== null ? days : 30);
    } catch (error) {
      console.error('Error loading admin settings:', error);
      setTicketDeleteDays(30);
    } finally {
      setAdminSettingsLoading(false);
    }
  };

  const handleSaveTicketSettings = async () => {
    try {
      setSavingTicketSettings(true);
      setTicketSettingsMessage({ type: '', text: '' });

      await api.put('/system-settings', {
        ticket_delete_days: ticketDeleteDays
      });

      setTicketSettingsMessage({ type: 'success', text: '‚úÖ Settings saved successfully!' });
      setTimeout(() => setTicketSettingsMessage({ type: '', text: '' }), 3000);
    } catch (error) {
      console.error('Error saving ticket settings:', error);
      setTicketSettingsMessage({ type: 'error', text: '‚ö†Ô∏è Failed to save settings' });
    } finally {
      setSavingTicketSettings(false);
    }
  };

  // Load admin settings when switching to admin tab
  useEffect(() => {
    if (activeTab === 'admin' && isAdmin) {
      loadAdminSettings();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeTab, isAdmin]);

  // Apply theme whenever it changes
  useEffect(() => {
    applyTheme(selectedTheme);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedTheme]);

  const handleThemeChange = async (themeId) => {
    setSelectedTheme(themeId);
    
    try {
      // Save to server (database) - NOT localStorage
      await updateUserPreferences({ themePreference: themeId });
      console.log('‚úÖ Theme saved to database:', themeId);
      
      // Show success message
      setShowSaveMessage(true);
      setFadeOut(false);
      
      // Start fade out animation after 1.5 seconds
      setTimeout(() => {
        setFadeOut(true);
      }, 1500);
      
      // Actually hide the message after animation completes
      setTimeout(() => {
        setShowSaveMessage(false);
        setFadeOut(false);
      }, 2000);
    } catch (error) {
      console.error('‚ùå Failed to save theme to server:', error);
      alert('Failed to save theme preference. Please try again.');
    }
  };

  const handlePasswordInputChange = (e) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear messages when user starts typing
    if (passwordMessage.text) {
      setPasswordMessage({ type: '', text: '' });
    }
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    // Validate passwords match
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setPasswordMessage({ type: 'error', text: 'New passwords do not match' });
      return;
    }
    
    // Validate password length
    if (passwordData.newPassword.length < 6) {
      setPasswordMessage({ type: 'error', text: 'Password must be at least 6 characters long' });
      return;
    }
    
    setIsChangingPassword(true);
    setPasswordMessage({ type: '', text: '' });
    
    try {
      const result = await changePassword({
        current_password: passwordData.currentPassword,
        new_password: passwordData.newPassword,
        confirm_password: passwordData.confirmPassword
      });
      
      setPasswordMessage({ 
        type: 'success', 
        text: result.message || 'Password changed successfully!' 
      });
      
      // Clear form
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
      
      // Auto-hide success message after 5 seconds
      setTimeout(() => {
        setPasswordMessage({ type: '', text: '' });
      }, 5000);
      
    } catch (error) {
      console.error('Password change error:', error);
      const errorMessage = error.detail || error.message || 'Failed to change password. Please try again.';
      setPasswordMessage({ type: 'error', text: errorMessage });
    } finally {
      setIsChangingPassword(false);
    }
  };

  return (
    <div className="preferences-container">
      <div className="preferences-header">
        <h1>‚öôÔ∏è Settings</h1>
        <p>Customize your app experience and manage system configuration</p>
      </div>

      {/* Tab Navigation */}
      <div className="preferences-tabs">
        <button
          className={`tab-button ${activeTab === 'theme' ? 'active' : ''}`}
          onClick={() => setActiveTab('theme')}
        >
          üé® Theme
        </button>
        <button
          className={`tab-button ${activeTab === 'password' ? 'active' : ''}`}
          onClick={() => setActiveTab('password')}
        >
          üîí Password
        </button>
        {(() => {
          console.log('üîç Rendering tabs - isAdmin state:', isAdmin);
          return isAdmin ? (
            <button
              className={`tab-button ${activeTab === 'admin' ? 'active' : ''}`}
              onClick={() => setActiveTab('admin')}
            >
              ‚öôÔ∏è System Config
            </button>
          ) : null;
        })()}
      </div>

      {showSaveMessage && (
        <div className={`save-message ${fadeOut ? 'fade-out' : ''}`}>
          <span>‚úÖ</span>
          <span>Theme saved successfully!</span>
        </div>
      )}

      {/* Theme Tab */}
      {activeTab === 'theme' && (
      <div className="preferences-section">
        <h2>üé® Theme Selection</h2>
        <p className="section-description">Choose your preferred color theme</p>
        
        <div className="theme-options">
          {themes.map(theme => (
            <div
              key={theme.id}
              className={`theme-card ${selectedTheme === theme.id ? 'selected' : ''}`}
              onClick={() => handleThemeChange(theme.id)}
            >
              <div className="theme-icon">{theme.icon}</div>
              <div className="theme-preview">
                <div 
                  className="color-block primary"
                  style={{ backgroundColor: theme.preview.background }}
                  title="Background"
                />
                <div 
                  className="color-block accent"
                  style={{ backgroundColor: theme.preview.primary }}
                  title="Primary Color"
                />
                <div 
                  className="color-block text"
                  style={{ backgroundColor: theme.preview.text }}
                  title="Text Color"
                />
              </div>
              <div className="theme-info">
                <h3>{theme.name}</h3>
                <p>{theme.description}</p>
              </div>
              {selectedTheme === theme.id && (
                <div className="selected-badge badge badge-success">
                  <span>‚úì</span> Active
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      )}

      {/* Admin Settings Tab */}
      {activeTab === 'admin' && isAdmin && (
        <div className="preferences-section admin-section">
          <h2>‚öôÔ∏è System Configuration</h2>
          <p className="section-description">Configure global system settings and preferences</p>
          <div className="migration-notice" style={{
            background: 'var(--info-light)',
            border: '1px solid var(--info-color)',
            borderRadius: '8px',
            padding: '12px 16px',
            marginBottom: '24px',
            display: 'flex',
            gap: '12px',
            alignItems: 'center'
          }}>
            <span style={{ fontSize: '1.2rem' }}>‚ÑπÔ∏è</span>
            <span>Looking for scheduler jobs? Visit the <strong>Dynamic Scheduler</strong> page for advanced job management.</span>
          </div>

          {adminSettingsLoading ? (
            <div className="loading-container" style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '16px',
              padding: '40px'
            }}>
              <div className="spinner"></div>
              <p>Loading system settings...</p>
            </div>
          ) : (
            <div className="admin-settings-card">
              <h3>üé´ Ticket Management</h3>
              <p className="section-description">Configure automatic cleanup for resolved support tickets</p>
              
              {ticketSettingsMessage.text && (
                <div className={`password-message ${ticketSettingsMessage.type}`} style={{ marginTop: '16px' }}>
                  <span>{ticketSettingsMessage.type === 'success' ? '‚úÖ' : '‚ö†Ô∏è'}</span>
                  <span>{ticketSettingsMessage.text}</span>
                </div>
              )}

              <div className="form-group" style={{ marginTop: '24px' }}>
                <div className="label-with-tooltip" style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                  <label htmlFor="ticketDeleteDays">Auto-Delete Period</label>
                  <div className="tooltip-wrapper" style={{ position: 'relative' }}>
                    <span 
                      className="info-tooltip-icon" 
                      onClick={() => setShowTooltip(!showTooltip)}
                      style={{
                        cursor: 'pointer',
                        fontSize: '1rem',
                        padding: '4px',
                        borderRadius: '50%',
                        background: 'var(--info-light)',
                        display: 'inline-flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        width: '24px',
                        height: '24px'
                      }}
                    >
                      ‚ÑπÔ∏è
                    </span>
                    {showTooltip && (
                      <>
                        <div 
                          className="tooltip-backdrop" 
                          onClick={() => setShowTooltip(false)}
                          style={{
                            position: 'fixed',
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                            zIndex: 999
                          }}
                        />
                        <div 
                          className="tooltip-bubble"
                          style={{
                            position: 'absolute',
                            top: '100%',
                            left: '0',
                            marginTop: '8px',
                            background: 'var(--card-background)',
                            border: '1px solid var(--border-color)',
                            borderRadius: '8px',
                            padding: '16px',
                            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                            zIndex: 1000,
                            minWidth: '300px',
                            maxWidth: '400px'
                          }}
                        >
                          <div className="tooltip-content">
                            <strong style={{ display: 'block', marginBottom: '8px' }}>How it works:</strong>
                            <ul style={{ marginLeft: '20px', lineHeight: '1.6' }}>
                              <li>When a ticket is marked as <strong>resolved</strong> or <strong>closed</strong>, a deletion timestamp is set</li>
                              <li>A background job runs every hour to delete tickets past their scheduled deletion time</li>
                              <li>All attachments are permanently deleted from the filesystem</li>
                            </ul>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </div>
                <p className="help-text" style={{ 
                  fontSize: '0.9rem', 
                  color: 'var(--text-secondary)', 
                  marginBottom: '12px' 
                }}>
                  Resolved/closed tickets and attachments will be automatically deleted after this period.
                </p>
                
                <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>
                  <select
                    id="ticketDeleteDays"
                    value={ticketDeleteDays}
                    onChange={(e) => setTicketDeleteDays(Number(e.target.value))}
                    disabled={savingTicketSettings}
                    style={{
                      flex: '1',
                      minWidth: '250px',
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid var(--border-color)',
                      background: 'var(--input-bg)',
                      color: 'var(--text-color)',
                      fontSize: '1rem'
                    }}
                  >
                    <option value={0}>Immediately (on resolve/close)</option>
                    <option value={7}>7 days after resolved</option>
                    <option value={14}>14 days after resolved</option>
                    <option value={30}>30 days after resolved (Recommended)</option>
                    <option value={60}>60 days after resolved</option>
                    <option value={90}>90 days after resolved</option>
                  </select>
                  
                  <button
                    onClick={handleSaveTicketSettings}
                    disabled={savingTicketSettings}
                    style={{
                      padding: '10px 24px',
                      borderRadius: '8px',
                      border: 'none',
                      background: 'var(--success-color)',
                      color: 'white',
                      fontSize: '1rem',
                      fontWeight: '600',
                      cursor: savingTicketSettings ? 'not-allowed' : 'pointer',
                      opacity: savingTicketSettings ? 0.6 : 1,
                      transition: 'all 0.2s ease',
                      whiteSpace: 'nowrap'
                    }}
                    onMouseEnter={(e) => !savingTicketSettings && (e.target.style.background = 'var(--success-hover)')}
                    onMouseLeave={(e) => !savingTicketSettings && (e.target.style.background = 'var(--success-color)')}
                  >
                    {savingTicketSettings ? 'üíæ Saving...' : 'üíæ Save Settings'}
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Password Tab */}
      {activeTab === 'password' && (
      <div className="preferences-section">
        <h2>üîí Change Password</h2>
        <p className="section-description">Update your account password</p>
        
        {passwordMessage.text && (
          <div className={`password-message ${passwordMessage.type}`}>
            <span>{passwordMessage.type === 'success' ? '‚úÖ' : '‚ö†Ô∏è'}</span>
            <span>{passwordMessage.text}</span>
          </div>
        )}
        
        <form onSubmit={handlePasswordChange} className="password-form">
          <div className="form-group">
            <label htmlFor="currentPassword">Current Password</label>
            <div className="input-with-toggle">
              <input
                type={showPasswords.current ? "text" : "password"}
                id="currentPassword"
                name="currentPassword"
                value={passwordData.currentPassword}
                onChange={handlePasswordInputChange}
                placeholder="Enter current password"
                required
                disabled={isChangingPassword}
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowPasswords({...showPasswords, current: !showPasswords.current})}
                disabled={isChangingPassword}
                tabIndex="-1"
              >
                {showPasswords.current ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="newPassword">New Password</label>
            <div className="input-with-toggle">
              <input
                type={showPasswords.new ? "text" : "password"}
                id="newPassword"
                name="newPassword"
                value={passwordData.newPassword}
                onChange={handlePasswordInputChange}
                placeholder="Enter new password (min 6 characters)"
                required
                minLength="6"
                disabled={isChangingPassword}
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowPasswords({...showPasswords, new: !showPasswords.new})}
                disabled={isChangingPassword}
                tabIndex="-1"
              >
                {showPasswords.new ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="confirmPassword">Confirm New Password</label>
            <div className="input-with-toggle">
              <input
                type={showPasswords.confirm ? "text" : "password"}
                id="confirmPassword"
                name="confirmPassword"
                value={passwordData.confirmPassword}
                onChange={handlePasswordInputChange}
                placeholder="Confirm new password"
                required
                minLength="6"
                disabled={isChangingPassword}
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowPasswords({...showPasswords, confirm: !showPasswords.confirm})}
                disabled={isChangingPassword}
                tabIndex="-1"
              >
                {showPasswords.confirm ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
          </div>
          
          <button 
            type="submit" 
            className="btn-change-password"
            disabled={isChangingPassword || !passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword}
          >
            {isChangingPassword ? 'üîÑ Changing Password...' : 'üîí Change Password'}
          </button>
        </form>
        
        <div className="password-requirements">
          <p><strong>Password Requirements:</strong> Minimum 6 characters; Cannot be the same as current password; Cannot reuse recent passwords</p>
        </div>
      </div>
      )}
    </div>
  );
};

export default Preferences;

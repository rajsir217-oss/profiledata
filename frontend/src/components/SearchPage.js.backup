import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../api';
import './SearchPage.css';

const SearchPage = () => {
  // State for image indices per user
  const [imageIndices, setImageIndices] = useState({});
  const [imageErrors, setImageErrors] = useState({});

  const initialSearchCriteria = {
    keyword: '',
    gender: '',
    ageMax: '',

  useEffect(() => {
    loadPiiRequests();
    loadUserFavorites();
    loadUserShortlist();
    loadSavedSearches();
    } else {
      // Clear states if not logged in
      setFavoritedUsers(new Set());
      setShortlistedUsers(new Set());
      setSavedSearches([]);
      setPiiRequests({});
      setPiiRequestCount(0);
    }
  }, []);

  const loadPiiRequests = async () => {
    const currentUser = localStorage.getItem('username');
    if (!currentUser) return;

    try {
      const response = await api.get(`/pii-requests/${currentUser}?type=sent`);
      const requests = response.data.requests || [];

      const requestStatus = {};
      requests.forEach(req => {
        requestStatus[`${req.requestedUsername}_${req.requestType}`] = req.status;
      });

      setPiiRequests(requestStatus);
      setPiiRequestCount(requests.filter(req => req.status === 'pending').length);
    } catch (err) {
      console.error('Error loading PII requests:', err);
    }
  };

  const handlePrevImage = (username, e) => {
    e.stopPropagation();
    setImageIndices(prev => ({
      ...prev,
      [username]: prev[username] === undefined ? 0 : prev[username] > 0 ? prev[username] - 1 : 0
    }));
  };

  const handleNextImage = (username, e, usersData) => {
    e.stopPropagation();
    setImageIndices(prev => {
      const currentIndex = prev[username] || 0;
      const maxIndex = (usersData.find(u => u.username === username)?.images?.length || 1) - 1;
      return {
        ...prev,
        [username]: currentIndex < maxIndex ? currentIndex + 1 : maxIndex
      };
    });
  };

  const renderProfileImage = (user) => {
    const currentIndex = imageIndices[user.username] || 0;
    const currentImage = user.images && user.images.length > currentIndex ? user.images[currentIndex] : null;
    const hasError = imageErrors[user.username] || false;

    // Check if user has access to view images
    const hasImageAccess = hasPiiAccess(user.username, 'images');

    // If no access to images, show masked version
    if (!hasImageAccess) {
      return (
        <div className="profile-image-container">
          <div className="profile-thumbnail-placeholder">
            <span className="no-image-icon">🔒</span>
          </div>
          <div className="image-access-overlay">
            <p className="text-muted small">Images Locked</p>
            <button
              className="btn btn-sm btn-primary"
              onClick={(e) => {
                e.stopPropagation();
                requestPiiAccess(user.username, 'images');
              }}
              disabled={isPiiRequestPending(user.username, 'images')}
            >
              {isPiiRequestPending(user.username, 'images') ? 'Pending' : 'Request Access'}
            </button>
          </div>
        </div>
      );
    }

    // Check if image is already a full URL (from search results) or relative path (from profile view)
    const imageSrc = currentImage && currentImage.startsWith('http') ? currentImage : `http://localhost:8000${currentImage}`;

    return (
      <div className="profile-image-container">
        {currentImage && !hasError ? (
          <img
            key={`${user.username}-${currentIndex}`}
            src={`${imageSrc}?t=${Date.now()}`}
            alt={`${user.firstName}'s profile`}
            className="profile-thumbnail"
            onError={(e) => {
              console.error(`Failed to load image: ${currentImage}`, e);
              setImageErrors(prev => ({ ...prev, [user.username]: true }));
              e.target.style.display = 'none';
              e.target.nextSibling.style.display = 'flex';
            }}
            onLoad={(e) => {
              console.log(`Successfully loaded image: ${currentImage}`);
              setImageErrors(prev => ({ ...prev, [user.username]: false }));
              e.target.style.display = 'block';
              e.target.nextSibling.style.display = 'none';
            }}
            crossOrigin="anonymous"
            loading="lazy"
          />
        ) : (
          <div className="profile-thumbnail-placeholder">
            <span className="no-image-icon">👤</span>
          </div>
        )}
        <div className="no-image-icon-overlay" style={{display: hasError || !currentImage ? 'flex' : 'none'}}>👤</div>

        {user.images.length > 1 && (
          <>
            <button
              className="image-nav-btn prev-btn"
              onClick={(e) => handlePrevImage(user.username, e)}
              disabled={currentIndex === 0}
            >
              ‹
            </button>
            <button
              className="image-nav-btn next-btn"
              onClick={(e) => handleNextImage(user.username, e, users)}
              disabled={currentIndex === user.images.length - 1}
            >
              ›
            </button>
            <div className="image-counter">
              {currentIndex + 1}/{user.images.length}
            </div>
          </>
        )}
      </div>
    );
  };

  // Dating field options
  const genderOptions = ['', 'Male', 'Female'];
  const educationOptions = ['', 'B.Tech in Computer Science', 'MBA from IIM', 'M.Tech in Engineering', 'B.Com', 'M.Com', 'BBA', 'MCA', 'B.Sc in Physics', 'M.Sc in Chemistry', 'MBBS', 'MD', 'CA', 'CS', 'B.A. in Economics', 'M.A. in English', 'Ph.D. in Mathematics', 'B.E. in Mechanical', 'Diploma in Engineering', 'B.Pharm', 'M.Pharm'];
  const occupationOptions = ['', 'Software Engineer', 'Data Scientist', 'Product Manager', 'Business Analyst', 'Consultant', 'Doctor', 'Chartered Accountant', 'Lawyer', 'Teacher', 'Professor', 'Architect', 'Designer', 'Marketing Manager', 'Sales Executive', 'HR Manager', 'Financial Analyst', 'Civil Engineer', 'Mechanical Engineer', 'Pharmacist', 'Nurse', 'Entrepreneur', 'Banker', 'Government Officer'];
  const religionOptions = ['', 'Hindu', 'Muslim', 'Christian', 'Sikh', 'Buddhist', 'Jain'];
  const eatingOptions = ['', 'Vegetarian', 'Eggetarian', 'Non-Veg'];
  const lifestyleOptions = ['', 'Never', 'Socially', 'Prefer not to say'];
  const relationshipOptions = ['', 'Single', 'Divorced', 'Widowed'];
  const bodyTypeOptions = ['', 'Slim', 'Athletic', 'Average', 'Curvy'];

  const loadUserFavorites = async () => {
    try {
      const username = localStorage.getItem('username');
      if (!username) {
        setFavoritedUsers(new Set());
        return;
      }

      const response = await api.get(`/favorites/${username}`);
      const favorites = response.data.favorites || [];
      const favoritedUsernames = new Set(favorites.map(fav => fav.username));
      setFavoritedUsers(favoritedUsernames);
      console.log('Loaded favorites:', favoritedUsernames);
    } catch (err) {
      // Silently handle error - favorites might not exist yet for new users
      console.debug('No favorites found or error loading favorites:', err);
      setFavoritedUsers(new Set());
    }
  };

  const loadUserShortlist = async () => {
    try {
      const username = localStorage.getItem('username');
      if (!username) {
        setShortlistedUsers(new Set());
        return;
      }

      const response = await api.get(`/shortlist/${username}`);
      const shortlist = response.data.shortlist || [];
      const shortlistedUsernames = new Set(shortlist.map(item => item.username));
      setShortlistedUsers(shortlistedUsernames);
      console.log('Loaded shortlist:', shortlistedUsernames);
    } catch (err) {
      // Silently handle error - shortlist might not exist yet for new users
      console.debug('No shortlist found or error loading shortlist:', err);
      setShortlistedUsers(new Set());
    }
  };

  const loadSavedSearches = async () => {
    try {
      const username = localStorage.getItem('username');
      if (username) {
        const response = await api.get(`/${username}/saved-searches`);
        setSavedSearches(response.data.savedSearches || []);
      }
    } catch (err) {
      if (err.response?.status === 404 || err.response?.data?.savedSearches?.length === 0) {
        console.info('No saved searches found for user (this is normal for new users)');
        setSavedSearches([]);
      } else {
        console.error('Error loading saved searches:', err);
        setSavedSearches([]);
      }
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setSearchCriteria(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSearch = async (page = 1) => {
    try {
      setLoading(true);
      setError('');

      const params = {
        ...searchCriteria,
        page: page,
        limit: recordsPerPage
      };

      Object.keys(params).forEach(key => {
        if (params[key] === '' || params[key] === false) {
          delete params[key];
        }
      });

      const response = await api.get('/search', { params });

      if (page === 1) {
        setUsers(response.data.users || []);
      } else {
        setUsers(prev => [...prev, ...(response.data.users || [])]);
      }

      setTotalResults(response.data.total || 0);
      setCurrentPage(page);

    } catch (err) {
      console.error('Error searching users:', err);
      setError('Failed to search users. ' + (err.response?.data?.detail || err.message));
    } finally {
      setLoading(false);
    }
  };

  const handleLoadMore = () => {
    handleSearch(currentPage + 1);
  };

  const handleSaveSearch = async () => {
    if (!saveSearchName.trim()) {
      setError('Please enter a name for the saved search');
      return;
    }

    try {
      const username = localStorage.getItem('username');
      if (!username) {
        setError('Please login to save searches');
        return;
      }

      const searchData = {
        name: saveSearchName.trim(),
        criteria: searchCriteria,
        createdAt: new Date().toISOString()
      };

      await api.post(`/${username}/saved-searches`, searchData);

      setSaveSearchName('');
      loadSavedSearches();
      loadPiiRequests();
    } catch (err) {
      console.error('Error saving search:', err);
      setError('Failed to save search. ' + (err.response?.data?.detail || err.message));
    }
  };

  const handleLoadSavedSearch = (savedSearch) => {
    setSearchCriteria(savedSearch.criteria);
    setSaveSearchName(savedSearch.name);
    setShowSavedSearches(false);
  };

  const handleDeleteSavedSearch = async (searchId) => {
    try {
      const username = localStorage.getItem('username');
      await api.delete(`/${username}/saved-searches/${searchId}`);
      loadSavedSearches();
    } catch (err) {
      console.error('Error deleting saved search:', err);
      setError('Failed to delete saved search');
    }
  };

  const parseHeight = (height) => {
    if (!height) return null;
    const match = height.match(/(\d+)'(\d+)"/);
    if (match) {
      return parseInt(match[1]) * 12 + parseInt(match[2]);
    }
    return null;
  };

  const calculateAge = (dob) => {
    if (!dob) return null;
    const birthDate = new Date(dob);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }

    return age;
  };

  const requestPiiAccess = async (targetUsername, requestType) => {
    const currentUser = localStorage.getItem('username');
    if (!currentUser) {
      setError('Please login to request PII access');
      return;
    }

    try {
      await api.post('/pii-request', {
        requester: currentUser,
        requested_user: targetUsername,
        request_type: requestType,
        message: `Request to view ${requestType === 'contact_info' ? 'contact information' : 'profile images'}`
      });

      setPiiRequests(prev => ({
        ...prev,
        [`${targetUsername}_${requestType}`]: 'pending'
      }));

      setPiiRequestCount(prev => prev + 1);
      alert(`${requestType === 'contact_info' ? 'Contact information' : 'Profile images'} request sent!`);
    } catch (err) {
      console.error('Error requesting PII access:', err);
      if (err.response?.status === 409) {
        setError('Request already pending');
      } else {
        setError('Failed to send request');
      }
    }
  };

  const hasPiiAccess = (targetUsername, requestType) => {
    return piiRequests[`${targetUsername}_${requestType}`] === 'approved';
  };

  const isPiiRequestPending = (targetUsername, requestType) => {
    return piiRequests[`${targetUsername}_${requestType}`] === 'pending';
  };

  const handleProfileAction = async (e, targetUsername, action) => {
    e.stopPropagation();

    const currentUser = localStorage.getItem('username');
    if (!currentUser) {
      setError('Please login to perform this action');
      return;
    }

    try {
      switch (action) {
        case 'favorite':
          const isCurrentlyFavorited = favoritedUsers.has(targetUsername);

          try {
            if (isCurrentlyFavorited) {
              // Remove from favorites
              await api.delete(`/favorites/${targetUsername}?username=${encodeURIComponent(currentUser)}`);
              setFavoritedUsers(prev => {
                const newSet = new Set(prev);
                newSet.delete(targetUsername);
                return newSet;
              });
              setStatusMessage('✅ Removed from favorites');
              setTimeout(() => setStatusMessage(''), 3000);
            } else {
              // Add to favorites
              await api.post(`/favorites/${targetUsername}?username=${encodeURIComponent(currentUser)}`);
              setFavoritedUsers(prev => new Set([...prev, targetUsername]));
              setStatusMessage('✅ Added to favorites');
              setTimeout(() => setStatusMessage(''), 3000);
            }
            setError(''); // Clear any previous errors
          } catch (err) {
            console.error(`Error ${isCurrentlyFavorited ? 'removing from' : 'adding to'} favorites:`, err);
            const errorMsg = `Failed to ${isCurrentlyFavorited ? 'remove from' : 'add to'} favorites. ` + (err.response?.data?.detail || err.message);
            setError(errorMsg);
            setStatusMessage(`❌ ${errorMsg}`);
            setTimeout(() => setStatusMessage(''), 3000);
          }
          break;

        case 'shortlist':
          const isCurrentlyShortlisted = shortlistedUsers.has(targetUsername);

          try {
            if (isCurrentlyShortlisted) {
              // Remove from shortlist
              await api.delete(`/shortlist/${targetUsername}?username=${encodeURIComponent(currentUser)}`);
              setShortlistedUsers(prev => {
                const newSet = new Set(prev);
                newSet.delete(targetUsername);
                return newSet;
              });
              setStatusMessage('✅ Removed from shortlist');
              setTimeout(() => setStatusMessage(''), 3000);
            } else {
              // Add to shortlist
              await api.post(`/shortlist/${targetUsername}?username=${encodeURIComponent(currentUser)}`);
              setShortlistedUsers(prev => new Set([...prev, targetUsername]));
              setStatusMessage('✅ Added to shortlist');
              setTimeout(() => setStatusMessage(''), 3000);
            }
            setError(''); // Clear any previous errors
          } catch (err) {
            console.error(`Error ${isCurrentlyShortlisted ? 'removing from' : 'adding to'} shortlist:`, err);
            const errorMsg = `Failed to ${isCurrentlyShortlisted ? 'remove from' : 'add to'} shortlist. ` + (err.response?.data?.detail || err.message);
            setError(errorMsg);
            setStatusMessage(`❌ ${errorMsg}`);
            setTimeout(() => setStatusMessage(''), 3000);
          }
          break;

        case 'exclude':
          await api.post(`/exclusions/${targetUsername}`, {
            username: currentUser
          });
          setError(''); // Clear any previous errors
          setStatusMessage('✅ Added to exclusions!');
          setTimeout(() => setStatusMessage(''), 3000);
          break;

        case 'message':
          navigate(`/messages?to=${targetUsername}`);
          break;

        default:
          console.warn('Unknown action:', action);
      }
    } catch (err) {
      console.error(`Error performing ${action}:`, err);
      const errorMsg = `Failed to ${action}. ` + (err.response?.data?.detail || err.message);
      setError(errorMsg);
      setStatusMessage(`❌ ${errorMsg}`);
      setTimeout(() => setStatusMessage(''), 3000);
    }
  };

  const filteredUsers = users.filter(user => {
    if (searchCriteria.ageMin || searchCriteria.ageMax) {
      const age = calculateAge(user.dob);
      if (age === null) return false;

      if (searchCriteria.ageMin && age < parseInt(searchCriteria.ageMin)) return false;
      if (searchCriteria.ageMax && age > parseInt(searchCriteria.ageMax)) return false;
    }

    if (searchCriteria.heightMin || searchCriteria.heightMax) {
      const heightInches = parseHeight(user.height);
      if (heightInches === null) return false;

      if (searchCriteria.heightMin && heightInches < parseInt(searchCriteria.heightMin)) return false;
      if (searchCriteria.heightMax && heightInches > parseInt(searchCriteria.heightMax)) return false;
    }

    if (searchCriteria.keyword) {
      const keyword = searchCriteria.keyword.toLowerCase();
      const searchableText = [
        user.firstName, user.lastName, user.username,
        user.location, user.education, user.occupation,
        user.aboutYou, user.bio, user.interests
      ].join(' ').toLowerCase();

      if (!searchableText.includes(keyword)) return false;
    }

    return true;
  });

  const indexOfLastRecord = currentPage * recordsPerPage;
  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
  const currentRecords = filteredUsers.slice(indexOfFirstRecord, indexOfLastRecord);

  return (
    <div className="search-page">
      <div className="search-header">
        <h2>🔍 Advanced Search</h2>
        <p className="text-muted">Find your perfect match with detailed filters</p>
      </div>

      {error && <div className="alert alert-danger">{error}</div>}

      {statusMessage && (
        <div className={`alert ${statusMessage.includes('❌') ? 'alert-danger' : 'alert-success'} alert-dismissible fade show`} role="alert">
          {statusMessage}
          <button type="button" className="btn-close" onClick={() => setStatusMessage('')}></button>
        </div>
      )}

      <div className="search-container">
        <div className="search-filters">
          <div className="filters-header">
            <h4>Search Filters</h4>
            <div className="filter-actions">
              <button
                className="btn btn-outline-primary btn-sm"
                onClick={() => setShowSavedSearches(!showSavedSearches)}
              >
                📋 Saved Searches ({savedSearches.length})
              </button>
            </div>
          </div>

          <div className="search-button-section mb-3">
            <button
              type="button"
              className="btn btn-primary btn-lg"
              onClick={() => handleSearch(1)}
              disabled={loading}
            >
              {loading ? 'Searching...' : 'Search Profiles'}
            </button>
          </div>

          {showSavedSearches && (
            <div className="saved-searches mb-3">
              <h6>Saved Searches</h6>
              {savedSearches.length === 0 ? (
                <p className="text-muted">No saved searches yet</p>
              ) : (
                <div className="saved-searches-list">
                  {savedSearches.map(search => (
                    <div key={search.id} className="saved-search-item">
                      <span onClick={() => handleLoadSavedSearch(search)}>
                        {search.name}
                      </span>
                      <button
                        className="btn btn-sm btn-outline-danger ms-2"
                        onClick={() => handleDeleteSavedSearch(search.id)}
                      >
                        ×
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          <form onSubmit={(e) => { e.preventDefault(); handleSearch(1); }}>
            <div className="filter-section">
              <h6>Basic Search</h6>
              <div className="row">
                <div className="col-md-12">
                  <div className="form-group">
                    <label>Keyword Search</label>
                    <input
                      type="text"
                      className="form-control"
                      name="keyword"
                      value={searchCriteria.keyword}
                      onChange={handleInputChange}
                      placeholder="Search in name, location, interests, bio..."
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Dating Preferences</h6>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Gender</label>
                    <select
                      className="form-control"
                      name="gender"
                      value={searchCriteria.gender}
                      onChange={handleInputChange}
                    >
                      {genderOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Relationship Status</label>
                    <select
                      className="form-control"
                      name="relationshipStatus"
                      value={searchCriteria.relationshipStatus}
                      onChange={handleInputChange}
                    >
                      {relationshipOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Age Range</h6>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Minimum Age</label>
                    <input
                      type="number"
                      className="form-control"
                      name="ageMin"
                      value={searchCriteria.ageMin}
                      onChange={handleInputChange}
                      min="18"
                      max="80"
                      placeholder="18"
                    />
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Maximum Age</label>
                    <input
                      type="number"
                      className="form-control"
                      name="ageMax"
                      value={searchCriteria.ageMax}
                      onChange={handleInputChange}
                      min="18"
                      max="80"
                      placeholder="80"
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Height Range</h6>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Minimum Height (inches)</label>
                    <input
                      type="number"
                      className="form-control"
                      name="heightMin"
                      value={searchCriteria.heightMin}
                      onChange={handleInputChange}
                      min="48"
                      max="84"
                      placeholder="48"
                    />
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Maximum Height (inches)</label>
                    <input
                      type="number"
                      className="form-control"
                      name="heightMax"
                      value={searchCriteria.heightMax}
                      onChange={handleInputChange}
                      min="48"
                      max="84"
                      placeholder="84"
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Location & Background</h6>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Location</label>
                    <input
                      type="text"
                      className="form-control"
                      name="location"
                      value={searchCriteria.location}
                      onChange={handleInputChange}
                      placeholder="City, State..."
                    />
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Religion</label>
                    <select
                      className="form-control"
                      name="religion"
                      value={searchCriteria.religion}
                      onChange={handleInputChange}
                    >
                      {religionOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Education</label>
                    <select
                      className="form-control"
                      name="education"
                      value={searchCriteria.education}
                      onChange={handleInputChange}
                    >
                      {educationOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Occupation</label>
                    <select
                      className="form-control"
                      name="occupation"
                      value={searchCriteria.occupation}
                      onChange={handleInputChange}
                    >
                      {occupationOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Lifestyle</h6>
              <div className="row">
                <div className="col-md-4">
                  <div className="form-group">
                    <label>Eating Preference</label>
                    <select
                      className="form-control"
                      name="eatingPreference"
                      value={searchCriteria.eatingPreference}
                      onChange={handleInputChange}
                    >
                      {eatingOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="col-md-4">
                  <div className="form-group">
                    <label>Drinking</label>
                    <select
                      className="form-control"
                      name="drinking"
                      value={searchCriteria.drinking}
                      onChange={handleInputChange}
                    >
                      {lifestyleOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="col-md-4">
                  <div className="form-group">
                    <label>Smoking</label>
                    <select
                      className="form-control"
                      name="smoking"
                      value={searchCriteria.smoking}
                      onChange={handleInputChange}
                    >
                      {lifestyleOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
              <div className="row">
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Body Type</label>
                    <select
                      className="form-control"
                      name="bodyType"
                      value={searchCriteria.bodyType}
                      onChange={handleInputChange}
                    >
                      {bodyTypeOptions.map(option => (
                        <option key={option} value={option}>{option || 'Any'}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>

            <div className="filter-section">
              <h6>Special Filters</h6>
              <div className="form-check">
                <input
                  type="checkbox"
                  className="form-check-input"
                  name="newlyAdded"
                  checked={searchCriteria.newlyAdded}
                  onChange={handleInputChange}
                  id="newlyAdded"
                />
                <label className="form-check-label" htmlFor="newlyAdded">
                  Show only newly added profiles (last 7 days)
                </label>
              </div>
            </div>

            <div className="filter-section">
              <h6>Save This Search</h6>
              <div className="input-group">
                <input
                  type="text"
                  className="form-control"
                  value={saveSearchName}
                  onChange={(e) => setSaveSearchName(e.target.value)}
                  placeholder="Enter search name..."
                />
                <button
                  type="button"
                  className="btn btn-primary"
                  onClick={handleSaveSearch}
                >
                  Save Search
                </button>
              </div>
            </div>
          </form>
        </div>

        <div className="search-results">
          <div className="results-header">
            <h4>Search Results</h4>
            <div className="results-info">
              <span className="badge bg-primary">Total: {totalResults}</span>
              <span className="badge bg-success ms-2">Filtered: {filteredUsers.length}</span>
            </div>
          </div>

          {loading && (
            <div className="text-center py-4">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
            </div>
          )}

          {!loading && filteredUsers.length === 0 && (
            <div className="no-results">
              <h5>No profiles found</h5>
              <p>Try adjusting your search criteria or use broader filters.</p>
            </div>
          )}

          <div className="results-grid">
            {currentRecords.map((user) => (
              <div key={user.username} className="result-card">
                <div className="card">
                  <div className="card-body">
                    <div className="d-flex justify-content-between align-items-start mb-2">
                      <h6 className="card-title mb-0">
                        {user.firstName} {user.lastName}
                      </h6>
                      <span className="badge bg-primary">{calculateAge(user.dob)} years</span>
                    </div>

                    <div className="d-flex gap-3 mb-3">
                      <div className="profile-image-left">
                        {renderProfileImage(user)}
                      </div>

                      <div className="user-details-right flex-grow-1">
                        <div className="user-details">
                          <p><strong>📍</strong> {user.location}</p>
                          <p><strong>🎓</strong> {user.education}</p>
                          <p><strong>💼</strong> {user.occupation}</p>
                          <p><strong>📏</strong> {user.height}</p>

                          <div className="pii-section">
                            <p><strong>📧</strong> Email:
                              {hasPiiAccess(user.username, 'contact_info') ? (
                                <span className="pii-data"> {user.contactEmail}</span>
                              ) : (
                                <span className="pii-masked"> [Request Access] </span>
                              )}
                              {!hasPiiAccess(user.username, 'contact_info') && (
                                <button
                                  className="btn btn-sm btn-link pii-request-btn"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    requestPiiAccess(user.username, 'contact_info');
                                  }}
                                  disabled={isPiiRequestPending(user.username, 'contact_info')}
                                >
                                  {isPiiRequestPending(user.username, 'contact_info') ? 'Pending' : 'Request'}
                                </button>
                              )}
                            </p>
                            <p><strong>📱</strong> Phone:
                              {hasPiiAccess(user.username, 'contact_info') ? (
                                <span className="pii-data"> {user.contactNumber}</span>
                              ) : (
                                <span className="pii-masked"> [Request Access] </span>
                              )}
                            </p>
                          </div>
                        </div>

                        <div className="user-badges">
                          {user.religion && <span className="badge bg-info">{user.religion}</span>}
                          {user.eatingPreference && <span className="badge bg-success">{user.eatingPreference}</span>}
                          {user.bodyType && <span className="badge bg-warning">{user.bodyType}</span>}
                        </div>
                      </div>
                    </div>

                    <div className="card-actions mt-3">
                      <button
                        className={`btn btn-sm ${favoritedUsers.has(user.username) ? 'btn-warning' : 'btn-outline-warning'} action-btn`}
                        onClick={(e) => handleProfileAction(e, user.username, 'favorite')}
                        title={favoritedUsers.has(user.username) ? 'Remove from Favorites' : 'Add to Favorites'}
                      >
                        {favoritedUsers.has(user.username) ? '⭐' : '☆'}
                      </button>
                      <button
                        className={`btn btn-sm ${shortlistedUsers.has(user.username) ? 'btn-info' : 'btn-outline-info'} action-btn`}
                        onClick={(e) => handleProfileAction(e, user.username, 'shortlist')}
                        title={shortlistedUsers.has(user.username) ? 'Remove from Shortlist' : 'Add to Shortlist'}
                      >
                        {shortlistedUsers.has(user.username) ? '📋' : '📋'}
                      </button>
                      <button
                        className="btn btn-sm btn-outline-primary action-btn"
                        onClick={(e) => handleProfileAction(e, user.username, 'message')}
                        title="Send Message"
                      >
                        💬
                      </button>
                      <button
                        className="btn btn-sm btn-outline-danger action-btn"
                        onClick={(e) => handleProfileAction(e, user.username, 'exclude')}
                        title="Exclude from Search"
                      >
                        ❌
                      </button>
                      <button
                        className="btn btn-sm btn-outline-primary"
                        onClick={() => navigate(`/profile/${user.username}`)}
                      >
                        View Profile
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {filteredUsers.length > currentRecords.length && (
            <div className="text-center mt-4">
              <button
                className="btn btn-outline-primary"
                onClick={handleLoadMore}
                disabled={loading}
              >
                {loading ? 'Loading...' : 'Load More'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SearchPage;

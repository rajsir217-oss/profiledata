"""
Weekly/Monthly Digest Email Job Template
Sends activity digest emails to users
"""

TEMPLATE = {
    "name": "Weekly Digest Emailer",
    "type": "scheduled",
    "schedule": "0 9 * * MON",  # Every Monday at 9 AM
    "description": "Send weekly activity digest emails to users",
    "enabled": True,
    "jobFunction": """
async def send_weekly_digest(db, logger):
    \"\"\"
    Send weekly activity digest emails to all active users
    Compiles user activity from the past week
    \"\"\"
    from services.notification_service import NotificationService
    from models.notification_models import NotificationQueueCreate, NotificationTrigger, NotificationChannel
    from datetime import datetime, timedelta
    
    logger.info("üìä Starting weekly digest email job...")
    
    try:
        notification_service = NotificationService(db)
        
        # Get date range for past week
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=7)
        
        # Get all active users with email notifications enabled
        users_cursor = db.users.find({
            "isActive": True,
            "contactEmail": {"$exists": True, "$ne": ""}
        })
        users = await users_cursor.to_list(length=None)
        
        logger.info(f"   Found {len(users)} active users")
        
        sent_count = 0
        skipped_count = 0
        error_count = 0
        
        for user in users:
            username = user.get("username")
            
            # Check if user has weekly digest enabled in preferences
            prefs = await notification_service.get_preferences(username)
            if not prefs or NotificationTrigger.WEEKLY_DIGEST not in prefs.channels:
                skipped_count += 1
                continue
            
            if NotificationChannel.EMAIL not in prefs.channels.get(NotificationTrigger.WEEKLY_DIGEST, []):
                skipped_count += 1
                continue
            
            try:
                # Compile user activity from past week
                digest_data = await compile_user_digest(db, username, start_date, end_date)
                
                # Skip if no activity
                if digest_data["stats"]["totalActivity"] == 0:
                    skipped_count += 1
                    continue
                
                # Create notification
                notification = NotificationQueueCreate(
                    username=username,
                    trigger=NotificationTrigger.WEEKLY_DIGEST,
                    channels=[NotificationChannel.EMAIL],
                    templateData={
                        "recipient": {
                            "firstName": user.get("firstName", "User"),
                            "username": username
                        },
                        "digest": digest_data,
                        "app": {
                            "dashboardUrl": f"http://localhost:3000/dashboard",
                            "preferencesUrl": f"http://localhost:3000/preferences",
                            "unsubscribeUrl": f"http://localhost:3000/unsubscribe"
                        }
                    }
                )
                
                await notification_service.enqueue_notification(notification)
                sent_count += 1
                
            except Exception as e:
                logger.error(f"   Error creating digest for {username}: {e}")
                error_count += 1
        
        logger.info(f"‚úÖ Weekly digest job completed:")
        logger.info(f"   Sent: {sent_count}")
        logger.info(f"   Skipped: {skipped_count}")
        logger.info(f"   Errors: {error_count}")
        
        return {
            "success": True,
            "sent": sent_count,
            "skipped": skipped_count,
            "errors": error_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå Weekly digest job failed: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}


async def compile_user_digest(db, username, start_date, end_date):
    \"\"\"
    Compile all user activity for the digest period
    \"\"\"
    
    # Query activity logs for this user in date range
    activity_cursor = db.activity_logs.find({
        "target_username": username,
        "timestamp": {"$gte": start_date, "$lte": end_date}
    })
    activities = await activity_cursor.to_list(length=None)
    
    # Categorize activities
    viewed_by = []
    favorited_by = []
    shortlisted_by = []
    messages_from = []
    blocked_by = []
    pii_requests_from = []
    searched_by = []
    
    for activity in activities:
        actor = activity.get("username")
        
        # Fetch actor profile
        actor_profile = await db.users.find_one({"username": actor})
        if not actor_profile:
            continue
        
        profile_summary = {
            "firstName": actor_profile.get("firstName", "User"),
            "age": actor_profile.get("age", "N/A"),
            "height": actor_profile.get("height", "N/A"),
            "location": actor_profile.get("location", "N/A")
        }
        
        action = activity.get("action_type")
        
        if action == "PROFILE_VIEW":
            viewed_by.append(profile_summary)
        elif action == "FAVORITE_ADDED":
            favorited_by.append(profile_summary)
        elif action == "SHORTLIST_ADDED":
            shortlisted_by.append(profile_summary)
        elif action == "MESSAGE_SENT":
            messages_from.append(profile_summary)
        elif action == "USER_BLOCKED":
            blocked_by.append(profile_summary)
        elif action == "PII_REQUESTED":
            pii_requests_from.append(profile_summary)
        elif action == "SEARCH_APPEARANCE":
            searched_by.append(profile_summary)
    
    total_activity = (
        len(viewed_by) + len(favorited_by) + len(shortlisted_by) +
        len(messages_from) + len(blocked_by) + len(pii_requests_from) +
        len(searched_by)
    )
    
    return {
        "period": "week",
        "frequency": "weekly",
        "viewedBy": viewed_by[:10],  # Limit to 10 per category
        "favoritedBy": favorited_by[:10],
        "shortlistedBy": shortlisted_by[:10],
        "messagesFrom": messages_from[:10],
        "blockedBy": blocked_by[:10],
        "piiRequestsFrom": pii_requests_from[:10],
        "searchedBy": searched_by[:10],
        "stats": {
            "profileViews": len(viewed_by),
            "favorites": len(favorited_by),
            "shortlisted": len(shortlisted_by),
            "newMessages": len(messages_from),
            "blockedBy": len(blocked_by),
            "piiRequests": len(pii_requests_from),
            "searchAppearances": len(searched_by),
            "totalActivity": total_activity
        }
    }
    """,
    "tags": ["notification", "email", "digest", "engagement"],
    "timeout": 600,
    "retries": 2,
    "metadata": {
        "category": "communication",
        "priority": "medium",
        "notificationChannel": "email"
    }
}

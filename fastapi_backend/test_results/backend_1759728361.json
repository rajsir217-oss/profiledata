{
  "id": "backend_1759728361",
  "timestamp": "2025-10-05T22:26:10.013895",
  "test_type": "backend",
  "status": "failed",
  "total_tests": 138,
  "passed_tests": 65,
  "failed_tests": 73,
  "duration": 8.794240951538086,
  "output": "..............F.FFFFFFFFFFFFFFFFFFFFFFF..F.............................F [ 48%]\nF....F...........FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFsssssssss.. [ 96%]\n.F.EE                                                                    [100%]\n==================================== ERRORS ====================================\n_ ERROR at setup of TestFileUploadEdgeCases.test_save_upload_file_special_characters _\nfile /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_utils.py, line 284\n      async def test_save_upload_file_special_characters(self, mock_settings):\n          \"\"\"Test file upload with special characters in filename.\"\"\"\n          special_filename = \"test file (with) [brackets] {and} special.jpg\"\n          file_content = b\"special content\"\n          mock_file = UploadFile(\n              file=BytesIO(file_content),\n              filename=special_filename,\n              content_type=\"image/jpeg\"\n          )\n\n          with patch('utils.settings') as mock_settings:\n              mock_settings.upload_dir = tempfile.gettempdir()\n\n              result_path = await save_upload_file(mock_file)\n\n              # Should handle special characters\n              assert result_path.startswith(\"/uploads/\")\n              assert result_path.endswith(\".jpg\")\nE       fixture 'mock_settings' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, invalid_user_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_login_data, sample_user_data, session_mocker, test_db, tests/test_utils.py::<event_loop>, tests/test_utils.py::TestFileUploadEdgeCases::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_utils.py:284\n_ ERROR at setup of TestFileUploadEdgeCases.test_save_upload_file_very_long_filename _\nfile /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_utils.py, line 303\n      async def test_save_upload_file_very_long_filename(self, mock_settings):\n          \"\"\"Test file upload with very long filename.\"\"\"\n          long_filename = \"a\" * 200 + \".jpg\"\n          file_content = b\"long filename content\"\n          mock_file = UploadFile(\n              file=BytesIO(file_content),\n              filename=long_filename,\n              content_type=\"image/jpeg\"\n          )\n\n          with patch('utils.settings') as mock_settings:\n              mock_settings.upload_dir = tempfile.gettempdir()\n\n              result_path = await save_upload_file(mock_file)\n\n              # Should handle long filename by truncating UUID part\n              assert result_path.startswith(\"/uploads/\")\n              assert len(result_path) < len(long_filename) + 50  # Should be reasonable length\nE       fixture 'mock_settings' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, invalid_user_data, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_login_data, sample_user_data, session_mocker, test_db, tests/test_utils.py::<event_loop>, tests/test_utils.py::TestFileUploadEdgeCases::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_utils.py:303\n=================================== FAILURES ===================================\n____________ TestIntegrationScenarios.test_full_authentication_flow ____________\n\nself = <test_auth.TestIntegrationScenarios object at 0x1134b1c70>\n\n    def test_full_authentication_flow(self):\n        \"\"\"Test complete authentication flow.\"\"\"\n        # 1. Hash a password\n        password = \"testpassword123\"\n        hashed = get_password_hash(password)\n    \n        # 2. Verify the password\n        assert verify_password(password, hashed) is True\n    \n        # 3. Create a token for the user\n        data = {\"sub\": \"testuser\"}\n        token = create_access_token(data)\n    \n        # 4. Extract user from token (simulate)\n        # This would normally use the mocked dependency\n        # Use the same secret that was used to create the token\n>       decoded_payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])\nE       NameError: name 'settings' is not defined\n\ntests/test_auth.py:227: NameError\n_______________ TestConnectToMongo.test_connect_to_mongo_success _______________\n\nself = <Coroutine test_connect_to_mongo_success>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________ TestConnectToMongo.test_connect_to_mongo_connection_failure __________\n\nself = <Coroutine test_connect_to_mongo_connection_failure>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________ TestConnectToMongo.test_connect_to_mongo_ping_failure _____________\n\nself = <Coroutine test_connect_to_mongo_ping_failure>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________ TestConnectToMongo.test_connect_to_mongo_multiple_calls ____________\n\nself = <Coroutine test_connect_to_mongo_multiple_calls>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______ TestCloseMongoConnection.test_close_mongo_connection_with_client _______\n\nself = <Coroutine test_close_mongo_connection_with_client>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____ TestCloseMongoConnection.test_close_mongo_connection_without_client ______\n\nself = <Coroutine test_close_mongo_connection_without_client>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_ TestCloseMongoConnection.test_close_mongo_connection_client_close_exception __\n\nself = <Coroutine test_close_mongo_connection_client_close_exception>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________________ TestGetDatabase.test_get_database_success ___________________\n\nself = <test_database.TestGetDatabase object at 0x11358e300>\n\n    def test_get_database_success(self):\n        \"\"\"Test getting database when initialized.\"\"\"\n        mock_db = MagicMock()\n>       database.database = mock_db\nE       NameError: name 'database' is not defined\n\ntests/test_database.py:138: NameError\n______________ TestGetDatabase.test_get_database_not_initialized _______________\n\nself = <test_database.TestGetDatabase object at 0x11358e4b0>\n\n    def test_get_database_not_initialized(self):\n        \"\"\"Test getting database when not initialized.\"\"\"\n        # Ensure database is None\n>       database.database = None\nE       NameError: name 'database' is not defined\n\ntests/test_database.py:147: NameError\n_________ TestGetDatabase.test_get_database_client_none_database_none __________\n\nself = <test_database.TestGetDatabase object at 0x11358e630>\n\n    def test_get_database_client_none_database_none(self):\n        \"\"\"Test getting database when both client and database are None.\"\"\"\n>       database.client = None\nE       NameError: name 'database' is not defined\n\ntests/test_database.py:156: NameError\n____________ TestDatabaseIntegration.test_full_connection_lifecycle ____________\n\nself = <Coroutine test_full_connection_lifecycle>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n________ TestDatabaseIntegration.test_connection_with_real_mongodb_url _________\n\nself = <Coroutine test_connection_with_real_mongodb_url>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________ TestDatabaseErrorHandling.test_connect_to_mongo_invalid_url __________\n\nself = <Coroutine test_connect_to_mongo_invalid_url>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____ TestDatabaseErrorHandling.test_get_database_after_connection_failure _____\n\nself = <Coroutine test_get_database_after_connection_failure>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________ TestDatabaseErrorHandling.test_concurrent_connections _____________\n\nself = <Coroutine test_concurrent_connections>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______________________________ test_health_check _______________________________\n\nself = <Coroutine test_health_check>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______________________________ test_root_endpoint ______________________________\n\nself = <Coroutine test_root_endpoint>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________________________ test_full_user_lifecycle ___________________________\n\nself = <Coroutine test_full_user_lifecycle>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________________________ test_pii_masking_workflow ___________________________\n\nself = <Coroutine test_pii_masking_workflow>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________________________ test_search_and_filtering ___________________________\n\nself = <Coroutine test_search_and_filtering>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________________________ test_concurrent_requests ___________________________\n\nself = <Coroutine test_concurrent_requests>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________________________ test_api_error_scenarios ___________________________\n\nself = <Coroutine test_api_error_scenarios>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______________________________ test_cors_headers _______________________________\n\nself = <Coroutine test_cors_headers>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________ TestUserBase.test_username_validation_min_length _______________\n\nself = <test_models.TestUserBase object at 0x11358f740>\n\n    def test_username_validation_min_length(self):\n        \"\"\"Test username minimum length validation.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            UserBase(username=\"ab\")  # Too short\n    \n>       assert \"min_length\" in str(exc_info.value)\nE       assert 'min_length' in \"1 validation error for UserBase\\nusername\\n  String should have at least 3 characters [type=string_too_short, input_value='ab', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.5/v/string_too_short\"\nE        +  where \"1 validation error for UserBase\\nusername\\n  String should have at least 3 characters [type=string_too_short, input_value='ab', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.5/v/string_too_short\" = str(1 validation error for UserBase\\nusername\\n  String should have at least 3 characters [type=string_too_short, input_value='ab', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.5/v/string_too_short)\nE        +    where 1 validation error for UserBase\\nusername\\n  String should have at least 3 characters [type=string_too_short, input_value='ab', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.5/v/string_too_short = <ExceptionInfo 1 validation error for UserBase\\nusername\\n  String should have at least 3 characters [type=string_too_sh...lue='ab', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.5/v/string_too_short tblen=2>.value\n\ntests/test_models.py:50: AssertionError\n__________________ TestMaskLocation.test_mask_location_basic ___________________\n\nself = <test_pii_security.TestMaskLocation object at 0x113668b90>\n\n    def test_mask_location_basic(self):\n        \"\"\"Test basic location masking.\"\"\"\n        location = \"123 Main St, New York, NY, USA\"\n        masked = mask_location(location)\n    \n>       assert masked == \"NY, USA\"\nE       AssertionError: assert 'USA' == 'NY, USA'\nE         \nE         - NY, USA\nE         + USA\n\ntests/test_pii_security.py:140: AssertionError\n________________ TestMaskLocation.test_mask_location_two_parts _________________\n\nself = <test_pii_security.TestMaskLocation object at 0x113668740>\n\n    def test_mask_location_two_parts(self):\n        \"\"\"Test location masking with two parts.\"\"\"\n        location = \"New York, NY\"\n        masked = mask_location(location)\n    \n>       assert masked == \"New York, NY\"\nE       AssertionError: assert 'NY' == 'New York, NY'\nE         \nE         - New York, NY\nE         + NY\n\ntests/test_pii_security.py:147: AssertionError\n________________ TestMaskLocation.test_mask_location_many_parts ________________\n\nself = <test_pii_security.TestMaskLocation object at 0x1136695e0>\n\n    def test_mask_location_many_parts(self):\n        \"\"\"Test location masking with many parts.\"\"\"\n        location = \"Apt 5B, 123 Main St, Springfield, IL, USA\"\n        masked = mask_location(location)\n    \n>       assert masked == \"IL, USA\"\nE       AssertionError: assert 'USA' == 'IL, USA'\nE         \nE         - IL, USA\nE         + USA\n\ntests/test_pii_security.py:182: AssertionError\n_____________ TestMaskUserPii.test_mask_user_pii_requester_id_same _____________\n\nself = <test_pii_security.TestMaskUserPii object at 0x11366a150>\n\n    def test_mask_user_pii_requester_id_same(self):\n        \"\"\"Test PII masking when requester is the same user.\"\"\"\n        user_data = {\n            \"username\": \"testuser\",\n            \"contactEmail\": \"test@example.com\"\n        }\n    \n        # Even without access_granted=True, should not mask if requester_id == username\n        masked = mask_user_pii(user_data, requester_id=\"testuser\")\n    \n>       assert masked == user_data\nE       AssertionError: assert {'contactEmai...': 'testuser'} == {'contactEmai...': 'testuser'}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'contactEmail': 't***@example.com'} != {'contactEmail': 'test@example.com'}\nE         Left contains 2 more items:\nE         {'contactEmailMasked': True, 'piiMasked': True}\nE         Use -v to get more diff\n\ntests/test_pii_security.py:317: AssertionError\n__________ TestCheckAccessGranted.test_check_access_granted_same_user __________\n\nself = <Coroutine test_check_access_granted_same_user>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________ TestCheckAccessGranted.test_check_access_granted_admin ____________\n\nself = <Coroutine test_check_access_granted_admin>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______ TestCheckAccessGranted.test_check_access_granted_approved_request _______\n\nself = <Coroutine test_check_access_granted_approved_request>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______ TestCheckAccessGranted.test_check_access_granted_denied_request ________\n\nself = <Coroutine test_check_access_granted_denied_request>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________ TestCheckAccessGranted.test_check_access_granted_no_request __________\n\nself = <Coroutine test_check_access_granted_no_request>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________ TestCheckAccessGranted.test_check_access_granted_db_error ___________\n\nself = <Coroutine test_check_access_granted_db_error>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________ TestCreateAccessRequest.test_create_access_request_new ____________\n\nself = <Coroutine test_create_access_request_new>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____ TestCreateAccessRequest.test_create_access_request_existing_pending ______\n\nself = <Coroutine test_create_access_request_existing_pending>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____ TestCreateAccessRequest.test_create_access_request_existing_approved _____\n\nself = <Coroutine test_create_access_request_existing_approved>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______ TestCreateAccessRequest.test_create_access_request_existing_denied ______\n\nself = <Coroutine test_create_access_request_existing_denied>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______ TestRespondToAccessRequest.test_respond_to_access_request_approve _______\n\nself = <Coroutine test_respond_to_access_request_approve>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n________ TestRespondToAccessRequest.test_respond_to_access_request_deny ________\n\nself = <Coroutine test_respond_to_access_request_deny>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____ TestRespondToAccessRequest.test_respond_to_access_request_not_found ______\n\nself = <Coroutine test_respond_to_access_request_not_found>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____ TestRespondToAccessRequest.test_respond_to_access_request_unauthorized ____\n\nself = <Coroutine test_respond_to_access_request_unauthorized>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_ TestRespondToAccessRequest.test_respond_to_access_request_invalid_object_id __\n\nself = <Coroutine test_respond_to_access_request_invalid_object_id>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________ TestUserRegistration.test_register_user_success ________________\n\nself = <Coroutine test_register_user_success>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________ TestUserRegistration.test_register_user_duplicate_username __________\n\nself = <Coroutine test_register_user_duplicate_username>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________ TestUserRegistration.test_register_user_duplicate_email ____________\n\nself = <Coroutine test_register_user_duplicate_email>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____________ TestUserRegistration.test_register_user_invalid_data _____________\n\nself = <Coroutine test_register_user_invalid_data>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________ TestUserRegistration.test_register_user_too_many_images ____________\n\nself = <Coroutine test_register_user_too_many_images>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________________ TestUserLogin.test_login_success _______________________\n\nself = <Coroutine test_login_success>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________________ TestUserLogin.test_login_invalid_credentials _________________\n\nself = <Coroutine test_login_invalid_credentials>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________________ TestUserLogin.test_login_admin_success ____________________\n\nself = <Coroutine test_login_admin_success>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________________ TestUserProfile.test_get_user_profile_own ___________________\n\nself = <Coroutine test_get_user_profile_own>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________ TestUserProfile.test_get_user_profile_other_user _______________\n\nself = <Coroutine test_get_user_profile_other_user>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________ TestUserProfile.test_get_user_profile_not_found ________________\n\nself = <Coroutine test_get_user_profile_not_found>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________________ TestUserProfile.test_update_user_profile ___________________\n\nself = <Coroutine test_update_user_profile>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n______________________ TestSearch.test_search_users_basic ______________________\n\nself = <Coroutine test_search_users_basic>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n__________________ TestSearch.test_search_users_with_filters ___________________\n\nself = <Coroutine test_search_users_with_filters>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________________ TestSearch.test_search_users_pagination ____________________\n\nself = <Coroutine test_search_users_pagination>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________________ TestAdminEndpoints.test_get_all_users_admin __________________\n\nself = <Coroutine test_get_all_users_admin>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n________________ TestAdminEndpoints.test_admin_password_change _________________\n\nself = <Coroutine test_admin_password_change>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n________________ TestAccessRequests.test_create_access_request _________________\n\nself = <Coroutine test_create_access_request>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n___________ TestAccessRequests.test_create_duplicate_access_request ____________\n\nself = <Coroutine test_create_duplicate_access_request>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________________ TestAccessRequests.test_get_access_requests __________________\n\nself = <Coroutine test_get_access_requests>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____________________ TestFavorites.test_add_to_favorites ______________________\n\nself = <Coroutine test_add_to_favorites>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n________________ TestFavorites.test_add_duplicate_to_favorites _________________\n\nself = <Coroutine test_add_duplicate_to_favorites>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________________ TestFavorites.test_get_favorites _______________________\n\nself = <Coroutine test_get_favorites>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________________ TestMessaging.test_send_message ________________________\n\nself = <Coroutine test_send_message>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n____________________ TestMessaging.test_send_empty_message _____________________\n\nself = <Coroutine test_send_empty_message>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________________ TestMessaging.test_get_messages ________________________\n\nself = <Coroutine test_get_messages>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_______________ TestErrorHandling.test_database_connection_error _______________\n\nself = <Coroutine test_database_connection_error>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_________________ TestErrorHandling.test_invalid_json_payload __________________\n\nself = <Coroutine test_invalid_json_payload>\n\n    def runtest(self) -> None:\n        self.obj = wrap_in_sync(\n            # https://github.com/pytest-dev/pytest-asyncio/issues/596\n            self.obj,  # type: ignore[has-type]\n        )\n>       super().runtest()\n\nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:904: in inner\n    _loop = asyncio.get_event_loop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asyncio.unix_events._UnixDefaultEventLoopPolicy object at 0x1134b0110>\n\n    def get_event_loop(self):\n        \"\"\"Get the event loop for the current context.\n    \n        Returns an instance of EventLoop or raises an exception.\n        \"\"\"\n        if (self._local._loop is None and\n                not self._local._set_called and\n                threading.current_thread() is threading.main_thread()):\n            stacklevel = 2\n            try:\n                f = sys._getframe(1)\n            except AttributeError:\n                pass\n            else:\n                # Move up the call stack so that the warning is attached\n                # to the line outside asyncio itself.\n                while f:\n                    module = f.f_globals.get('__name__')\n                    if not (module == 'asyncio' or module.startswith('asyncio.')):\n                        break\n                    f = f.f_back\n                    stacklevel += 1\n            import warnings\n            warnings.warn('There is no current event loop',\n                          DeprecationWarning, stacklevel=stacklevel)\n            self.set_event_loop(self.new_event_loop())\n    \n        if self._local._loop is None:\n>           raise RuntimeError('There is no current event loop in thread %r.'\n                               % threading.current_thread().name)\nE           RuntimeError: There is no current event loop in thread 'MainThread'.\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/events.py:702: RuntimeError\n_____________ TestGetFullImageUrl.test_path_without_leading_slash ______________\n\nself = <test_utils.TestGetFullImageUrl object at 0x114225eb0>\nmock_settings = <MagicMock name='settings' id='4635653424'>\n\n    def test_path_without_leading_slash(self, mock_settings):\n        \"\"\"Test path without leading slash.\"\"\"\n        path_without_slash = \"uploads/test.jpg\"\n        full_url = get_full_image_url(path_without_slash)\n    \n>       assert full_url == \"http://localhost:8000/uploads/test.jpg\"\nE       AssertionError: assert 'http://local...oads/test.jpg' == 'http://local...oads/test.jpg'\nE         \nE         - http://localhost:8000/uploads/test.jpg\nE         ?                      -\nE         + http://localhost:8000uploads/test.jpg\n\ntests/test_utils.py:271: AssertionError\n=============================== warnings summary ===============================\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\nvenv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:271: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\nmodels.py:44\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/models.py:44: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    @validator('username')\n\nmodels.py:50\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/models.py:50: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    @validator('sex')\n\nmodels.py:56\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/models.py:56: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    @validator('eatingPreference')\n\nmodels.py:62\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/models.py:62: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    @validator('citizenshipStatus')\n\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\nvenv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py:252: PydanticDeprecatedSince20: `json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/\n    warnings.warn(\n\nvenv/lib/python3.12/site-packages/passlib/utils/__init__.py:854\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13\n    from crypt import crypt as _crypt\n\nvenv/lib/python3.12/site-packages/starlette/routing.py:661\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/starlette/routing.py:661: DeprecationWarning: async generator function lifespans are deprecated, use an @contextlib.asynccontextmanager function instead\n    warnings.warn(\n\ntests/test_auth.py::TestJWTTokenFunctions::test_create_access_token\ntests/test_auth.py::TestJWTTokenFunctions::test_create_access_token_without_sub\ntests/test_auth.py::TestJWTTokenFunctions::test_create_access_token_with_custom_settings\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_valid_token\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_no_sub\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_wrong_secret\ntests/test_auth.py::TestIntegrationScenarios::test_full_authentication_flow\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/auth.py:31: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    expire = datetime.utcnow() + timedelta(minutes=15)\n\ntests/test_auth.py::TestJWTTokenFunctions::test_create_access_token_with_expiry\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_expired_token\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/auth.py:29: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    expire = datetime.utcnow() + expires_delta\n\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_valid_token\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:769: DeprecationWarning: The event_loop fixture provided by pytest-asyncio has been redefined in\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/conftest.py:19\n  Replacing the event_loop fixture with a custom implementation is deprecated\n  and will lead to errors in the future.\n  If you want to request an asyncio event loop with a scope other than function\n  scope, use the \"scope\" argument to the asyncio mark when marking the tests.\n  If you want to return different types of event loops, use the event_loop_policy\n  fixture.\n  \n    warnings.warn(\n\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_valid_token\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_expired_token\ntests/test_auth.py::TestGetCurrentUser::test_get_current_user_no_sub\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/jose/jwt.py:311: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    now = timegm(datetime.utcnow().utctimetuple())\n\ntests/test_models.py::TestUserInDB::test_valid_user_in_db\ntests/test_models.py::TestUserInDB::test_valid_user_in_db\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/pydantic/main.py:164: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__)\n\ntests/test_models.py::TestUserResponse::test_valid_user_response\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_models.py:135: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    \"createdAt\": datetime.utcnow(),\n\ntests/test_models.py::TestUserResponse::test_valid_user_response\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/tests/test_models.py:136: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    \"updatedAt\": datetime.utcnow()\n\ntests/test_utils.py::TestSaveUploadFile::test_save_upload_file_success\ntests/test_utils.py::TestSaveUploadFile::test_save_upload_file_no_extension\ntests/test_utils.py::TestSaveUploadFile::test_save_upload_file_directory_creation\ntests/test_utils.py::TestSaveUploadFile::test_save_upload_file_exception_handling\ntests/test_utils.py::TestSaveMultipleFiles::test_save_multiple_files_success\ntests/test_utils.py::TestSaveMultipleFiles::test_save_multiple_files_mixed_types\ntests/test_utils.py::TestSaveMultipleFiles::test_save_multiple_files_size_limit\ntests/test_utils.py::TestSaveMultipleFiles::test_save_multiple_files_partial_failure\ntests/test_utils.py::TestSaveMultipleFiles::test_save_multiple_files_empty_list\n  /Users/rajsiripuram02/opt/appsrc/profiledata/fastapi_backend/venv/lib/python3.12/site-packages/_pytest/python.py:182: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.\n  You need to install a suitable plugin for your async framework, for example:\n    - anyio\n    - pytest-asyncio\n    - pytest-tornasync\n    - pytest-trio\n    - pytest-twisted\n    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_auth.py::TestIntegrationScenarios::test_full_authentication_flow\nFAILED tests/test_database.py::TestConnectToMongo::test_connect_to_mongo_success\nFAILED tests/test_database.py::TestConnectToMongo::test_connect_to_mongo_connection_failure\nFAILED tests/test_database.py::TestConnectToMongo::test_connect_to_mongo_ping_failure\nFAILED tests/test_database.py::TestConnectToMongo::test_connect_to_mongo_multiple_calls\nFAILED tests/test_database.py::TestCloseMongoConnection::test_close_mongo_connection_with_client\nFAILED tests/test_database.py::TestCloseMongoConnection::test_close_mongo_connection_without_client\nFAILED tests/test_database.py::TestCloseMongoConnection::test_close_mongo_connection_client_close_exception\nFAILED tests/test_database.py::TestGetDatabase::test_get_database_success - N...\nFAILED tests/test_database.py::TestGetDatabase::test_get_database_not_initialized\nFAILED tests/test_database.py::TestGetDatabase::test_get_database_client_none_database_none\nFAILED tests/test_database.py::TestDatabaseIntegration::test_full_connection_lifecycle\nFAILED tests/test_database.py::TestDatabaseIntegration::test_connection_with_real_mongodb_url\nFAILED tests/test_database.py::TestDatabaseErrorHandling::test_connect_to_mongo_invalid_url\nFAILED tests/test_database.py::TestDatabaseErrorHandling::test_get_database_after_connection_failure\nFAILED tests/test_database.py::TestDatabaseErrorHandling::test_concurrent_connections\nFAILED tests/test_e2e_api.py::test_health_check - RuntimeError: There is no c...\nFAILED tests/test_e2e_api.py::test_root_endpoint - RuntimeError: There is no ...\nFAILED tests/test_e2e_api.py::test_full_user_lifecycle - RuntimeError: There ...\nFAILED tests/test_e2e_api.py::test_pii_masking_workflow - RuntimeError: There...\nFAILED tests/test_e2e_api.py::test_search_and_filtering - RuntimeError: There...\nFAILED tests/test_e2e_api.py::test_concurrent_requests - RuntimeError: There ...\nFAILED tests/test_e2e_api.py::test_api_error_scenarios - RuntimeError: There ...\nFAILED tests/test_e2e_api.py::test_cors_headers - RuntimeError: There is no c...\nFAILED tests/test_models.py::TestUserBase::test_username_validation_min_length\nFAILED tests/test_pii_security.py::TestMaskLocation::test_mask_location_basic\nFAILED tests/test_pii_security.py::TestMaskLocation::test_mask_location_two_parts\nFAILED tests/test_pii_security.py::TestMaskLocation::test_mask_location_many_parts\nFAILED tests/test_pii_security.py::TestMaskUserPii::test_mask_user_pii_requester_id_same\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_same_user\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_admin\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_approved_request\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_denied_request\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_no_request\nFAILED tests/test_pii_security.py::TestCheckAccessGranted::test_check_access_granted_db_error\nFAILED tests/test_pii_security.py::TestCreateAccessRequest::test_create_access_request_new\nFAILED tests/test_pii_security.py::TestCreateAccessRequest::test_create_access_request_existing_pending\nFAILED tests/test_pii_security.py::TestCreateAccessRequest::test_create_access_request_existing_approved\nFAILED tests/test_pii_security.py::TestCreateAccessRequest::test_create_access_request_existing_denied\nFAILED tests/test_pii_security.py::TestRespondToAccessRequest::test_respond_to_access_request_approve\nFAILED tests/test_pii_security.py::TestRespondToAccessRequest::test_respond_to_access_request_deny\nFAILED tests/test_pii_security.py::TestRespondToAccessRequest::test_respond_to_access_request_not_found\nFAILED tests/test_pii_security.py::TestRespondToAccessRequest::test_respond_to_access_request_unauthorized\nFAILED tests/test_pii_security.py::TestRespondToAccessRequest::test_respond_to_access_request_invalid_object_id\nFAILED tests/test_routes_integration.py::TestUserRegistration::test_register_user_success\nFAILED tests/test_routes_integration.py::TestUserRegistration::test_register_user_duplicate_username\nFAILED tests/test_routes_integration.py::TestUserRegistration::test_register_user_duplicate_email\nFAILED tests/test_routes_integration.py::TestUserRegistration::test_register_user_invalid_data\nFAILED tests/test_routes_integration.py::TestUserRegistration::test_register_user_too_many_images\nFAILED tests/test_routes_integration.py::TestUserLogin::test_login_success - ...\nFAILED tests/test_routes_integration.py::TestUserLogin::test_login_invalid_credentials\nFAILED tests/test_routes_integration.py::TestUserLogin::test_login_admin_success\nFAILED tests/test_routes_integration.py::TestUserProfile::test_get_user_profile_own\nFAILED tests/test_routes_integration.py::TestUserProfile::test_get_user_profile_other_user\nFAILED tests/test_routes_integration.py::TestUserProfile::test_get_user_profile_not_found\nFAILED tests/test_routes_integration.py::TestUserProfile::test_update_user_profile\nFAILED tests/test_routes_integration.py::TestSearch::test_search_users_basic\nFAILED tests/test_routes_integration.py::TestSearch::test_search_users_with_filters\nFAILED tests/test_routes_integration.py::TestSearch::test_search_users_pagination\nFAILED tests/test_routes_integration.py::TestAdminEndpoints::test_get_all_users_admin\nFAILED tests/test_routes_integration.py::TestAdminEndpoints::test_admin_password_change\nFAILED tests/test_routes_integration.py::TestAccessRequests::test_create_access_request\nFAILED tests/test_routes_integration.py::TestAccessRequests::test_create_duplicate_access_request\nFAILED tests/test_routes_integration.py::TestAccessRequests::test_get_access_requests\nFAILED tests/test_routes_integration.py::TestFavorites::test_add_to_favorites\nFAILED tests/test_routes_integration.py::TestFavorites::test_add_duplicate_to_favorites\nFAILED tests/test_routes_integration.py::TestFavorites::test_get_favorites - ...\nFAILED tests/test_routes_integration.py::TestMessaging::test_send_message - R...\nFAILED tests/test_routes_integration.py::TestMessaging::test_send_empty_message\nFAILED tests/test_routes_integration.py::TestMessaging::test_get_messages - R...\nFAILED tests/test_routes_integration.py::TestErrorHandling::test_database_connection_error\nFAILED tests/test_routes_integration.py::TestErrorHandling::test_invalid_json_payload\nFAILED tests/test_utils.py::TestGetFullImageUrl::test_path_without_leading_slash\nERROR tests/test_utils.py::TestFileUploadEdgeCases::test_save_upload_file_special_characters\nERROR tests/test_utils.py::TestFileUploadEdgeCases::test_save_upload_file_very_long_filename\n73 failed, 65 passed, 9 skipped, 46 warnings, 2 errors in 7.08s\nsys:1: RuntimeWarning: coroutine 'TestUserRegistration.test_register_user_invalid_data' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestUserProfile.test_get_user_profile_other_user' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestAdminEndpoints.test_get_all_users_admin' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestFavorites.test_add_duplicate_to_favorites' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestErrorHandling.test_invalid_json_payload' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n",
  "error": "sys:1: RuntimeWarning: coroutine 'TestUserRegistration.test_register_user_invalid_data' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestUserProfile.test_get_user_profile_other_user' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestAdminEndpoints.test_get_all_users_admin' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestFavorites.test_add_duplicate_to_favorites' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\nsys:1: RuntimeWarning: coroutine 'TestErrorHandling.test_invalid_json_payload' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"
}
"""
Migration: Consolidate workLocation into workplace field
Date: October 24, 2025
Reason: workplace (60 uses) is more common than workLocation (22 uses)

This migration:
1. For users with workLocation but no workplace: copy workLocation → workplace
2. For users with both: keep workplace, append workLocation if different
3. Drop workLocation field
"""

import asyncio
import sys
from pathlib import Path

# Add parent directory to path so we can import config
sys.path.insert(0, str(Path(__file__).parent.parent))

from motor.motor_asyncio import AsyncIOMotorClient
from config import Settings

settings = Settings()

async def migrate_workplace_fields():
    """Consolidate workLocation into workplace"""
    print("🔄 Starting workplace field consolidation...")
    
    # Connect to MongoDB
    client = AsyncIOMotorClient(settings.mongodb_url)
    db = client[settings.database_name]
    
    try:
        # Get all users with workLocation field
        users_with_worklocation = await db.users.find(
            {"workLocation": {"$exists": True, "$ne": None, "$ne": ""}}
        ).to_list(None)
        
        print(f"📊 Found {len(users_with_worklocation)} users with workLocation field")
        
        updated_count = 0
        skipped_count = 0
        
        for user in users_with_worklocation:
            username = user.get("username")
            work_location = user.get("workLocation", "").strip()
            workplace = user.get("workplace", "").strip()
            
            if not work_location:
                continue
            
            # Decide what to do based on existing workplace value
            if not workplace:
                # No workplace set - use workLocation
                new_workplace = work_location
                action = "COPIED"
            elif workplace == work_location:
                # Same value - just keep workplace
                new_workplace = workplace
                action = "SAME"
            else:
                # Different values - combine them
                new_workplace = f"{workplace} ({work_location})"
                action = "MERGED"
            
            # Update the user
            result = await db.users.update_one(
                {"username": username},
                {
                    "$set": {"workplace": new_workplace},
                    "$unset": {"workLocation": ""}
                }
            )
            
            if result.modified_count > 0:
                updated_count += 1
                print(f"  ✅ {action}: {username} -> workplace: '{new_workplace}'")
            else:
                skipped_count += 1
        
        # Also remove workLocation field from users who don't have a value
        result = await db.users.update_many(
            {"workLocation": {"$exists": True}},
            {"$unset": {"workLocation": ""}}
        )
        
        print(f"\n📊 Migration Summary:")
        print(f"  ✅ Updated users: {updated_count}")
        print(f"  ⏭️  Skipped users: {skipped_count}")
        print(f"  🗑️  Removed empty workLocation fields: {result.modified_count}")
        print(f"\n✅ Migration completed successfully!")
        
    except Exception as e:
        print(f"❌ Migration failed: {e}")
        raise
    finally:
        client.close()
        print("🔌 Database connection closed")

if __name__ == "__main__":
    asyncio.run(migrate_workplace_fields())

# Quick Context Reference
**Feed this to Cascade to refresh memory on ProfileData app architecture**  
**Last Updated:** Oct 25, 2025

---
Read QUICK_CONTEXT_REFERENCE.md to refresh your context

⚠️ **CRITICAL:** NO HARDCODED LOCALHOST/PORT REFERENCES ANYWHERE (python or js)  
⚠️ **CRITICAL:** Use config.py and apiConfig.js for ALL URLs  
⚠️ **CRITICAL:** See COMPREHENSIVE_CODE_AUDIT.md for refactoring priorities


## 🔴 CRITICAL MANDATORY RULES

### 1. ⚠️ NO Browser Modals EVER
```javascript
// ❌ NEVER USE
alert(), confirm(), prompt()

// ✅ ALWAYS USE
<Toast message="Success!" type="success" />
// Custom modals with proper styling
// 2-click delete pattern (DeleteButton component)
```

### 2. 🔐 SINGLE Auth System Only
```python
# ✅ CORRECT - Use everywhere
from auth.jwt_auth import get_current_user_dependency as get_current_user

@router.get("/endpoint")
async def endpoint(
    current_user: dict = Depends(get_current_user),  # Returns dict
    ...
):
    username = current_user["username"]  # Dict access
```

**NEVER USE:** `from auth import get_current_user` (legacy)

### 3. 🎨 NO Hardcoded Styles or Colors
```css
/* ✅ ALWAYS use CSS variables */
background: var(--primary-color);
color: var(--text-color);
border: 1px solid var(--border-color);
padding: var(--spacing-md);
margin: var(--spacing-sm);
border-radius: var(--radius-md);

/* Gradients */
background: linear-gradient(135deg, 
  var(--primary-color) 0%, 
  var(--secondary-color) 100%
);
```

**❌ AVOID:** Inline styles with `style={{...}}`  
**✅ PREFER:** CSS modules or className with CSS file  
**Current Issue:** 286 inline styles across 36 files need refactoring

**Available Themes:** Cozy Light (default), Dark, Rose, Light Gray, Ultra Light Gray

### 4. 🔇 NO console.log in Production
```javascript
// ❌ NEVER USE (259 occurrences found!)
console.log('Debug info:', data);

// ✅ ALWAYS USE
import logger from './utils/logger';
logger.debug('Debug info:', data);  // Only in dev
logger.info('User action:', action);  // Production-safe
logger.error('Error:', err);  // Always logged
```

**Create:** `/frontend/src/utils/logger.js` with environment-aware logging

### 5. 📁 Never Delete Files Immediately
```bash
# When replacing files:
mv OldComponent.js OldComponent.js.toberemoved
# Create new file
# Keep .toberemoved files for user review
```

### 6. ⚙️ NO Hardcoded URLs or Configuration
```python
# ❌ NEVER HARDCODE
url = "http://localhost:8000"
db = "mongodb://localhost:27017"

# ✅ ALWAYS USE CONFIG
from config import Settings
settings = Settings()
url = settings.backend_url
db = settings.mongodb_url
```

```javascript
// ❌ NEVER HARDCODE
const API_URL = 'http://localhost:8000';

// ✅ ALWAYS USE
import { getBackendUrl } from './config/apiConfig';
const API_URL = getBackendUrl();
```

**Found:** 50+ hardcoded URLs that need fixing!

---

## 🏗️ Architecture Quick Facts

### Stack
- **Backend:** FastAPI + Python 3.12 + Motor (async MongoDB)
- **Frontend:** React + React Router
- **Database:** MongoDB (matrimonialDB)
- **Auth:** JWT (HS256, 30min expiry)

### Key Directories
```
/fastapi_backend/
  ├── auth/jwt_auth.py          ← PRIMARY AUTH (use this!)
  ├── auth/legacy_auth.py       ← DEPRECATED (do not use)
  ├── models/                    ← Pydantic models
  ├── services/                  ← Business logic
  ├── routers/                   ← Additional routes
  │   ├── notifications.py       ← Notification API
  │   └── verification.py        ← Email verification (NEW)
  ├── job_templates/             ← Scheduler templates
  ├── migrations/                ← Database migrations
  ├── routes.py                  ← Main routes
  ├── config.py                  ← Settings (USE FOR ALL CONFIG!)
  └── main.py                    ← Entry point

/frontend/src/
  ├── components/                ← React components
  ├── config/apiConfig.js        ← API URLs (USE THIS!)
  ├── themes/themes.css          ← Theme variables
  ├── utils/logger.js            ← Logging utility (TODO: create)
  └── api.js                     ← API config
```

### API Routes
```
/api/users/*              → routes.py (main)
/api/auth/*               → auth_routes.py
/api/notifications/*      → routers/notifications.py
/api/verification/*       → routers/verification.py (NEW - Oct 25)
/api/scheduler/*          → routes_dynamic_scheduler.py
/api/activity-logs/*      → routers/activity_logs.py
```

---

## 🔔 Notification System (FULLY OPERATIONAL - Oct 22, 2025)

### Critical Bug Fixes Applied
**Problem:** End-to-end flow broken - queue never cleared

**KEY FIX:** `notification.id` NOT `notification.dict().get("_id")`
- Pydantic field alias bug - dict() returns None for _id
- Fixed in email_notifier_template.py & sms_notifier_template.py

**Database Field Names:**
```python
# DB has contactEmail & contactNumber, NOT email & phone
email = user.get("email") or user.get("contactEmail")
phone = user.get("phone") or user.get("contactNumber")
```

**MongoDB Update Syntax:**
```python
# ✅ CORRECT
update_doc = {
    "$set": {"status": "sent", "updatedAt": datetime.utcnow()},
    "$inc": {"attempts": 1}
}
```

### Architecture
- **Queue:** `notification_queue` collection
- **Log:** `notification_log` collection
- **Templates:** `notification_templates` collection
- **Job Templates:** email_notifier_template.py, sms_notifier_template.py
- **UI:** Event Queue Manager (admin-only)

### Status Mapping (Frontend)
```javascript
const statusMap = {
    'pending': 'queued',
    'sent': 'sent',
    'failed': 'failed'
};
```

---

## 📅 Scheduler (Dynamic Jobs Only)

### Rules
- ✅ ALL jobs in `dynamic_jobs` MongoDB collection
- ✅ ONE scheduler: unified_scheduler.py
- ❌ NO hardcoded jobs in code
- ❌ NO Python `schedule` library

### Job Templates
Located in `/job_templates/`:
- email_notifier_template.py
- sms_notifier_template.py
- scheduled_notification_processor_template.py (NEW - Oct 22)
- weekly_digest_notifier_template.py
- system_cleanup.py, ticket_cleanup.py, etc.

### UI
`http://localhost:3000/dynamic-scheduler`

---

## 🎯 Component Consistency

### MUST Keep in Sync
- `UserCard.js` (Dashboard)
- `SearchResultCard.js` (Search, L3V3L, Favorites, Shortlist)

**Same everywhere:**
- Button styles, icons, hover effects
- Action handlers, modal behavior
- Active/inactive states

### Reusable Components
```jsx
// DeleteButton - Use for ALL delete actions
<DeleteButton
  onDelete={() => deleteItem(id)}
  itemName="notification"
  size="medium"
/>
```

### Standard Icons
- Favorite: ⭐ (active) / ☆ (inactive)
- Shortlist: ✓📋 (active) / 📋 (inactive)
- Message: 💬
- Delete: 🗑️

---

## ⚙️ Key Collections (MongoDB)

```
users, sessions, favorites, shortlist, exclusions
profile_views, messages, conversations
pii_requests, pii_access, image_access
notification_preferences, notification_queue, notification_log
notification_templates, scheduled_notifications (NEW)
dynamic_jobs, job_executions
activity_logs (NEW - 30 day TTL)
contact_tickets, test_results
```

---

## 🔒 Security Essentials

### JWT Config
```python
secret_key = "CHANGE_IN_PRODUCTION"
algorithm = "HS256"
access_token_expire_minutes = 30
```

### Token Storage (Frontend)
```javascript
localStorage.setItem('token', access_token);
localStorage.setItem('username', username);
```

### CORS (main.py)
```python
allow_origins=["http://localhost:3000", "http://localhost:3001"]
allow_credentials=True
```

---

## 🎨 Theme CSS Variables (themes.css)

### Colors
```css
--primary-color, --secondary-color, --accent-color
```

### Backgrounds
```css
--background-color, --surface-color, --card-background, --input-bg
```

### Text
```css
--text-color, --text-secondary, --text-muted
```

### Interactive
```css
--hover-background, --active-background, --selected-background
```

### Status
```css
--success-color, --danger-color, --warning-color, --info-color
--success-light, --danger-light, --warning-light, --info-light
```

---

## 🧭 Navigation & UI

### Sidebar (Simple Toggle)
- Starts collapsed (left: -280px)
- Click hamburger (☰) to toggle
- No overlay, no pin feature
- Flexbox layout pushes content

### Admin Settings Consolidated
**Route:** `/preferences` (UnifiedPreferences.js)

**Tabs:**
1. 🎨 Account Settings (all users)
2. 🔔 Notifications (all users)
3. ⚙️ System Config (admin only)

---

## 🎉 Email Verification & Onboarding System (Oct 25, 2025)

### Complete User Activation Flow
```
Register → Email Sent → Verify Email → Pending Admin → Approved → Active
   ✅         📧            ✅              ⏳            👨‍💼        🎉
```

### Key Components

**Backend:**
- `EmailVerificationService` (411 lines)
- `routers/verification.py` - 3 endpoints
- `services/email_verification_service.py`

**Frontend:**
- `VerifyEmail.js` - Verification success/error page
- `ActivationBadge.js` - Banner status indicator
- Compact badge on profile (below Profile ID)

**API Endpoints:**
```python
POST /api/verification/verify-email
  - Verifies token from email
  - Sets accountStatus = "pending_admin_approval"
  - Marks emailVerified = true

POST /api/verification/resend-verification
  - Resends verification email
  - Rate limited: 5 attempts/day

GET /api/verification/status/{username}
  - Returns activation status
  - Used for badges and UI state
```

**Database Fields (Added to users collection):**
```python
accountStatus: str  # pending_email_verification, pending_admin_approval, active
emailVerified: bool
emailVerifiedAt: datetime
emailVerificationToken: str
emailVerificationTokenExpiry: datetime
emailVerificationAttempts: int
adminApprovalStatus: str  # pending, approved, rejected
adminApprovedBy: str
adminApprovedAt: datetime
onboardingCompleted: bool
```

**Migration:**
- `add_activation_fields.py` - Added fields to 203 existing users
- All existing users set to "active" status
- New users start at "pending_email_verification"

**Email Template:**
- Beautiful HTML with purple gradient header
- Personalized greeting
- Verification button + fallback link
- Mobile responsive

**Security Features:**
- 24-hour token expiry
- Rate limiting (5 emails/day)
- Secure token generation
- Email validation

### Status Badge Display

**Two-tier UI:**
1. **Detailed Banner** (top of profile)
   - Full explanation
   - Action buttons (resend email)
   - Next steps guidance

2. **Compact Badge** (below Profile ID)
   - Quick status reference
   - Color-coded:
     - 📧 Yellow: Email verification pending
     - ⏳ Blue: Admin approval pending
     - 🚫 Red: Suspended
     - ⚪ Gray: Deactivated
   - Only shows on own profile
   - Hidden when status = "active"

**Condition:**
```jsx
{isOwnProfile && activationStatus && activationStatus.accountStatus !== 'active' && (
  <div className="activation-badge">
    {/* Badge content */}
  </div>
)}
```

---

## 📋 Recent Updates (Oct 22, 2025)

### ✅ Scheduled Notifications System (Option B)
- Complete scheduling infrastructure (one-time + recurring)
- Schedule management UI (ScheduleListModal)
- 2-click delete pattern (no browser modals)
- ⏰ button with tooltips and badge counts
- Visual indicators (pulsing gradient for active schedules)

### ✅ Activity Logger
- Full implementation with 30-day TTL
- Activity Logs UI component (admin-only)
- Fixed MongoDB index conflict bug

### ✅ Notification System Bug Fixes
- 13 critical bugs fixed (see detailed list above)
- End-to-end flow now working
- Queue cleanup operational

---

## 🚨 Common Mistakes to Avoid

### Authentication
- ❌ `from auth import get_current_user` (legacy)
- ❌ `current_user.username` (attribute access)
- ❌ `current_user: TokenData` (wrong type)
- ✅ `from auth.jwt_auth import get_current_user_dependency as get_current_user`
- ✅ `current_user: dict = Depends(get_current_user)`
- ✅ `username = current_user["username"]`

### Configuration & URLs
- ❌ `"http://localhost:3000"` (50+ occurrences found)
- ❌ `"http://localhost:8000"` (23 occurrences found)
- ❌ `"mongodb://localhost:27017"` (22 occurrences found)
- ✅ Use `settings.frontend_url` from config.py
- ✅ Use `getBackendUrl()` from apiConfig.js
- ✅ Use `settings.mongodb_url` from config.py

### Styling & CSS
- ❌ Inline styles: `style={{padding: '8px'}}` (286 found!)
- ❌ Hardcoded colors: `#667eea`, `#f0f0f0`
- ❌ `@media (prefers-color-scheme: dark)`
- ✅ Use CSS modules or className
- ✅ Use `var(--primary-color)` for colors
- ✅ Use `var(--spacing-md)` for spacing

### Logging & Debugging
- ❌ `console.log()` everywhere (259 occurrences!)
- ❌ Debug code left in production
- ✅ Use logger.debug() (dev only)
- ✅ Use logger.error() for errors
- ✅ Environment-aware logging

### UI/UX
- ❌ `alert()`, `window.confirm()`, `prompt()`
- ❌ Inconsistent button styles
- ❌ Different icons for same action
- ✅ Custom modals with proper styling
- ✅ DeleteButton component for deletes
- ✅ Consistent icons everywhere

### Scheduler
- ❌ Hardcoded jobs in code
- ❌ Multiple scheduler instances
- ❌ Using Python `schedule` library
- ✅ All jobs in dynamic_jobs collection
- ✅ Single unified_scheduler.py
- ✅ Job templates in /job_templates/

### Email Verification
- ❌ Accessing `user.email` (doesn't exist)
- ❌ Using `notification.dict().get("_id")` (returns None)
- ✅ Use `user.get("contactEmail")` 
- ✅ Use `notification.id` (field alias works)

---

## ⚡ Quick Reference Commands

### Start Services
```bash
# Backend
cd fastapi_backend
./bstart.sh  # or: uvicorn main:app --reload

# Frontend
cd frontend
npm start    # or: ./fstart.sh
```

### MongoDB
```bash
# Check queue
mongosh matrimonialDB --eval "db.notification_queue.find({}).limit(5)"

# Check logs
mongosh matrimonialDB --eval "db.notification_log.find({}).limit(5)"

# Clear queue (testing)
mongosh matrimonialDB --eval "db.notification_queue.deleteMany({})"
```

### Git
```bash
# Current branch
git branch --show-current

# Status
git status --short

# Commit
git add -A
git commit -m "feat: description"

# Merge to dev
git checkout dev
git merge feature-branch --no-ff
git push origin dev
```

---

## 📞 Troubleshooting

### 401 Unauthorized
- Token expired?
- Using correct auth function?
- Token in Authorization header?

### 404 Not Found
- Route registered in main.py?
- Correct baseURL?
- API prefix matches?

### Theme Not Working
- Using CSS variables?
- All 5 themes have the variable?
- Theme class on document root?

### Scheduler Not Running
- Job in `dynamic_jobs` collection?
- Job enabled?
- `nextRunAt` in past?

---

## 📦 Core Dependencies

### Backend
```python
fastapi, uvicorn, motor, pydantic
python-jose[cryptography], passlib[bcrypt]
python-multipart, jinja2
croniter (for scheduled notifications)
```

### Frontend
```javascript
react, react-router-dom, axios
@fullcalendar/react (optional - for calendar view)
```

---

## 💾 Environment Variables (.env)

```bash
# Database
MONGODB_URL=mongodb://localhost:27017
DATABASE_NAME=matrimonialDB

# JWT
SECRET_KEY=your-secret-key-here
ACCESS_TOKEN_EXPIRE_MINUTES=30

# URLs
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:8000

# Email (optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
FROM_EMAIL=
FROM_NAME=

# SMS (optional)
SMS_PROVIDER=twilio
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_FROM_PHONE=
```

---

## 🎯 Key Files to Reference

**Auth Pattern:**
- `/fastapi_backend/routes.py` (line 24)

**Config:**
- `/fastapi_backend/config.py`

**Themes:**
- `/frontend/src/themes/themes.css`

**Recent Fix Examples:**
- `/fastapi_backend/routers/notifications.py` (auth fix)
- `/fastapi_backend/job_templates/email_notifier_template.py` (notification.id fix)

---

## 📝 Testing

### Backend
```bash
pytest  # 70% minimum, 85% target
```

### Frontend
```bash
npm test  # 70% minimum
```

### Required Tests
- Unit tests (success + error cases)
- API endpoint tests (GET, POST, PUT, DELETE)
- Auth/authorization tests
- Component render tests
- User interaction tests

---

## 🔗 Important Routes

```
/login              → Login.js
/register           → Register.js
/dashboard          → Dashboard.js
/search             → SearchPage.js
/l3v3l-matches      → L3V3LMatches.js
/profile/:username  → Profile.js
/edit-profile       → EditProfile.js
/preferences        → UnifiedPreferences.js (consolidated)
/messages           → Messages.js
/dynamic-scheduler  → DynamicScheduler.js (admin-only)
/event-queue-manager → EventQueueManager.js (admin-only)
/activity-logs      → ActivityLogs.js (admin-only)
```

---

## ✅ Pre-Commit Checklist

### Code Quality
- [ ] Using correct auth import (`jwt_auth`, not `legacy_auth`)?
- [ ] All colors use CSS variables?
- [ ] No inline styles (use CSS modules)?
- [ ] No `alert()`, `confirm()`, `prompt()`?
- [ ] No `console.log()` (use logger)?
- [ ] Tests written (85% coverage target)?

### Configuration
- [ ] No hardcoded URLs (localhost:3000, localhost:8000)?
- [ ] No hardcoded MongoDB URLs?
- [ ] Using `getBackendUrl()` from apiConfig.js?
- [ ] Using `settings` from config.py?

### Consistency
- [ ] Both UserCard & SearchResultCard updated (if card change)?
- [ ] Documentation updated?
- [ ] TODOs created for future work?
- [ ] Migrations created if schema changed?

### Email System
- [ ] Using `contactEmail` not `email`?
- [ ] Using `contactNumber` not `phone`?
- [ ] Token expiry set properly?
- [ ] Rate limiting in place?

---

## 📊 Code Quality Metrics (Oct 25, 2025 Audit)

**Overall Health:** C+ (72/100)

### Critical Issues (Must Fix)
- ⚠️ Hardcoded URLs: 50+ occurrences
- ⚠️ Inline Styles: 286 occurrences  
- ⚠️ console.log: 259 occurrences
- ⚠️ TODOs: 12 unresolved

### Refactoring Priority
1. **P0 - Critical:** Replace hardcoded URLs (8-12 hours)
2. **P1 - High:** CSS refactoring (20-25 hours)
3. **P1 - High:** Implement logger (5-8 hours)
4. **P2 - Medium:** Resolve TODOs (10-15 hours)

**Total Estimated Time:** 40-50 hours

See `COMPREHENSIVE_CODE_AUDIT.md` for full details.

---

## 🎯 Quick Refactoring Examples

### Replace Hardcoded URL
```python
# ❌ Before
url = "http://localhost:8000/api/users"

# ✅ After  
from config import Settings
settings = Settings()
url = f"{settings.backend_url}/api/users"
```

### Replace Inline Style
```jsx
// ❌ Before (44 in Register.js!)
<div style={{
  padding: '8px',
  margin: '16px',
  borderRadius: '6px',
  backgroundColor: '#f0f0f0'
}}>

// ✅ After
<div className="form-section">

/* In CSS */
.form-section {
  padding: var(--spacing-sm);
  margin: var(--spacing-md);
  border-radius: var(--radius-md);
  background: var(--surface-color);
}
```

### Replace console.log
```javascript
// ❌ Before (39 in Profile.js!)
console.log('Loading profile:', username);

// ✅ After
import logger from '../utils/logger';
logger.debug('Loading profile:', username);
```

---

## 🗂️ Files Needing Most Attention

### Inline Styles (Top 5)
1. `Register.js` - 44 inline styles
2. `Profile.js` - 43 inline styles
3. `UnifiedPreferences.js` - 21 inline styles
4. `Logo.js` - 20 inline styles
5. `EditProfile.js` - 18 inline styles

### console.log (Top 5)
1. `Profile.js` - 39 occurrences
2. `SearchPage.js` - 36 occurrences
3. `socketService.js` - 26 occurrences
4. `realtimeMessagingService.js` - 15 occurrences
5. `NotificationTester.js` - 14 occurrences

### Hardcoded URLs (Top 3)
1. `fix_all_localhost.py` - 11 occurrences (ironic!)
2. `test_utils.py` - 4 occurrences
3. `apiConfig.js` - 3 occurrences (defaults)

---

**END OF QUICK REFERENCE**  
**Use this to quickly refresh memory on ProfileData app structure and standards**  
**Last Major Audit:** Oct 25, 2025 - See COMPREHENSIVE_CODE_AUDIT.md


# GLOBAL APP SETTINGS TO REMEMBER
# Memory Dump Document - Reference for Critical Settings
# Last Updated: October 21, 2025, 9:36 AM

## üìã TABLE OF CONTENTS
1. [File Management Protocol](#file-management-protocol) üÜï
2. [Admin Settings Integration](#admin-settings-integration) üÜï
3. [Authentication System](#authentication-system)
4. [Configuration Settings](#configuration-settings)
5. [Database Architecture](#database-architecture)
6. [Theme System](#theme-system)
7. [API Patterns](#api-patterns)
8. [Notification System](#notification-system)
9. [Scheduler Architecture](#scheduler-architecture)
10. [UI/UX Standards](#uiux-standards)
11. [Testing Requirements](#testing-requirements)
12. [Security Settings](#security-settings)
13. [Component Consistency](#component-consistency)
14. [File Structure](#file-structure)
15. [Sidebar Navigation](#sidebar-navigation)
16. [Dashboard Features](#dashboard-features)

---

## üìÅ FILE MANAGEMENT PROTOCOL

### ‚ö†Ô∏è MANDATORY: Never Delete Old Files Immediately

**When creating new files that replace existing ones:**

1. **Rename old files** with `.toberemoved` extension
2. **Keep them** in the same directory as reference
3. **Create new replacement** files with the intended name
4. **Document what was replaced** in commit/notes

### Example:
```bash
# Old file exists: Preferences.js
# Creating new file: UnifiedPreferences.js (replacement)

# Step 1: Rename old file
mv Preferences.js Preferences.js.toberemoved
mv Preferences.css Preferences.css.toberemoved

# Step 2: Create new files
# UnifiedPreferences.js (already created)
```

### Benefits:
- ‚úÖ User can review for functionality discrepancies
- ‚úÖ Easy to compare old vs new implementation
- ‚úÖ Safe rollback if new version has issues
- ‚úÖ Clear audit trail of what was replaced
- ‚úÖ Marked files won't be imported/bundled by webpack

### When to Delete .toberemoved Files:
- After user reviews and confirms new version works
- After testing period (e.g., 1-2 weeks)
- When explicitly requested by user
- Bulk delete: `find . -name "*.toberemoved" -delete`

### Files Already Using This Pattern:
- `Preferences.js.toberemoved` ‚Üí Replaced by `UnifiedPreferences.js` (Oct 21, 2025)
- `Preferences.css.toberemoved` ‚Üí Replaced by `UnifiedPreferences.css` (Oct 21, 2025)

### Auto-apply This Rule For:
- Component replacements (React files)
- Stylesheet replacements (CSS files)
- Route/endpoint refactors (Python files)
- Configuration file updates
- Any file being deprecated/replaced

**DO NOT delete old files without explicit user permission.**

---

## ‚öôÔ∏è ADMIN SETTINGS INTEGRATION

### Merged /admin/settings into /preferences

**Route:** `/preferences` (uses `UnifiedPreferences.js`)

**Tabs:**
1. **üé® Account Settings** - Theme selection, profile settings (all users)
2. **üîî Notifications** - Notification preferences (all users)
3. **‚öôÔ∏è System Config** - Admin-only settings (admin users only)

### Implementation Details:

**UnifiedPreferences.js:**
- Checks `localStorage.getItem('username') === 'admin'`
- Shows/hides System Config tab based on admin status
- Integrates ticket cleanup settings from old AdminSettings

**System Config Tab Features:**
- üé´ Ticket Management
  - Auto-delete period for resolved/closed tickets
  - Options: Immediately, 7, 14, 30, 60, 90 days
  - Includes tooltip explaining how it works

**Files:**
- **Active:** `/components/UnifiedPreferences.js`
- **Active:** `/components/UnifiedPreferences.css`
- **Deprecated:** `/components/Preferences.js.toberemoved`
- **Deprecated:** `/components/Preferences.css.toberemoved`
- **Removed from sidebar:** "System Configuration" menu item

**Benefit:** All settings consolidated in one place, cleaner navigation

---

## üîê AUTHENTICATION SYSTEM

### Critical Rule: SINGLE AUTH SYSTEM ONLY
**NEVER use multiple auth functions. ONE system for entire app.**

### Correct Import (ALWAYS)
```python
from auth.jwt_auth import get_current_user_dependency as get_current_user
```

### Correct Usage
```python
@router.get("/endpoint")
async def my_endpoint(
    current_user: dict = Depends(get_current_user),  # Returns dict
    db = Depends(get_database)
):
    username = current_user["username"]  # Dict access
    role = current_user.get("role", "free_user")
```

### NEVER Use
```python
# ‚ùå WRONG - Legacy auth
from auth import get_current_user

# ‚ùå WRONG - Different type
current_user: TokenData = Depends(get_current_user)

# ‚ùå WRONG - Attribute access
username = current_user.username
```

### Auth Files
- **USE:** `/auth/jwt_auth.py` - Primary auth system
- **NEVER USE:** `/auth/legacy_auth.py` - Backward compatibility only

### Frontend Auth
```javascript
// Token storage
localStorage.setItem('token', access_token);
localStorage.setItem('username', username);

// API calls auto-include token via interceptor
import api from '../api';
const response = await api.get('/endpoint');
```

### Token Settings
- **Expiration:** 30 minutes (default)
- **Algorithm:** HS256
- **Secret Key:** In config.py (CHANGE IN PRODUCTION!)
- **Storage:** localStorage (frontend)

---

## ‚öôÔ∏è CONFIGURATION SETTINGS

### Location: `/fastapi_backend/config.py`

```python
class Settings(BaseSettings):
    # Database
    mongodb_url: str = "mongodb://localhost:27017"
    database_name: str = "matrimonialDB"
    
    # JWT
    secret_key: str = "default_secret_key_for_testing"
    algorithm: str = "HS256"
    access_token_expire_minutes: int = 30
    
    # URLs
    frontend_url: str = "http://localhost:3000"
    backend_url: str = "http://localhost:8000"
    
    # File Upload
    upload_dir: str = "uploads"
```

### Environment Variables (.env)
```bash
MONGODB_URL=mongodb://localhost:27017
DATABASE_NAME=matrimonialDB
SECRET_KEY=your-secret-key-here
ACCESS_TOKEN_EXPIRE_MINUTES=30
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:8000
```

---

## üóÑÔ∏è DATABASE ARCHITECTURE

### MongoDB Connection
- **URL:** mongodb://localhost:27017
- **Database:** matrimonialDB
- **Driver:** motor (async)

### Key Collections
```python
# Users & Auth
db.users                    # User profiles
db.sessions                 # Active sessions

# Matching & Interactions
db.favorites                # User favorites
db.shortlist                # User shortlists
db.exclusions              # Excluded users
db.profile_views           # Profile view tracking

# Messaging
db.messages                # Direct messages
db.conversations           # Conversation threads

# PII & Privacy
db.pii_requests            # PII access requests
db.pii_access              # Granted PII access
db.image_access            # Image access control

# Notifications
db.notification_preferences  # User notification settings
db.notification_queue       # Pending notifications
db.notification_log         # Sent notification history
db.notification_templates   # Email/SMS templates

# Scheduling
db.dynamic_jobs            # Scheduled jobs (database-driven)
db.job_executions          # Job execution history

# Admin
db.contact_tickets         # Contact form submissions
db.test_results            # Test execution results
db.meta_fields             # Dynamic field definitions
```

### Database Access Pattern
```python
from database import get_database

async def my_function(db = Depends(get_database)):
    users = db.users
    result = await users.find_one({"username": username})
```

---

## üé® THEME SYSTEM

### CRITICAL: NEVER Use Hardcoded Colors

### Correct Usage
```css
/* ‚úÖ ALWAYS use CSS variables */
background: var(--primary-color);
color: var(--text-color);
border: 1px solid var(--border-color);

/* Gradients */
background: linear-gradient(135deg, 
  var(--primary-color) 0%, 
  var(--secondary-color) 100%
);
```

### Available Themes
1. **Cozy Light** (default)
2. **Dark**
3. **Rose**
4. **Light Gray**
5. **Ultra Light Gray**

### Theme Variables (`/frontend/src/themes/themes.css`)
```css
/* Colors */
--primary-color          /* Main theme color */
--secondary-color        /* Secondary theme color */
--accent-color           /* Accent highlights */

/* Backgrounds */
--background-color       /* Page background */
--surface-color          /* Card/section background */
--card-background        /* Card backgrounds */
--input-bg               /* Input field backgrounds */

/* Text */
--text-color             /* Primary text */
--text-secondary         /* Secondary text */
--text-muted             /* Muted/disabled text */

/* Borders */
--border-color           /* Default borders */
--divider-color          /* Divider lines */

/* Interactive */
--hover-background       /* Hover state background */
--active-background      /* Active state background */
--selected-background    /* Selected item background */

/* Status */
--success-color          /* Success indicators */
--danger-color           /* Error/danger indicators */
--warning-color          /* Warning indicators */
--info-color             /* Info indicators */
```

### Theme Switching
```javascript
// ThemeContext.js
const themes = ['cozy-light', 'dark', 'rose', 'light-gray', 'ultra-light-gray'];
localStorage.setItem('theme', selectedTheme);
document.documentElement.className = `theme-${selectedTheme}`;
```

---

## üåê API PATTERNS

### Backend Routes Structure
```
/api/users/*              # Main user routes (routes.py)
/api/auth/*               # Authentication (auth_routes.py)
/api/admin/*              # Admin routes (admin_routes.py)
/api/scheduler/*          # Dynamic scheduler (routes_dynamic_scheduler.py)
/api/notifications/*      # Notifications (routers/notifications.py)
/api/tests/*              # Test management (test_management.py)
/api/image-access/*       # Image access (routes_image_access.py)
/api/pii-access/*         # PII access (routes_pii_access.py)
```

### Frontend API Structure
```javascript
// Main API (baseURL: /api/users)
import api from '../api';

// Custom APIs (different baseURL)
import { imageAccess } from '../api';     // Image access API
import { notifications } from '../api';   // Notifications API

// All have auth token interceptor
```

### Standard Response Format
```javascript
// Success
{
  "success": true,
  "message": "Operation successful",
  "data": {...}
}

// Error
{
  "success": false,
  "message": "Error message",
  "error": "Detailed error"
}
```

### CORS Settings (`main.py`)
```python
allow_origins=[
    "http://localhost:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001"
],
allow_credentials=True,
allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
allow_headers=["*"]
```

---

## üîî NOTIFICATION SYSTEM

### Architecture
- **Service:** NotificationService
- **Queue:** notification_queue collection
- **Templates:** notification_templates collection
- **Channels:** Email, SMS, Push (planned)
- **Job Templates:** EmailNotifierTemplate, SMSNotifierTemplate

### Triggers (25+ types)
```python
# Match events
NEW_MATCH, MUTUAL_FAVORITE, SHORTLIST_ADDED, MATCH_MILESTONE

# Activity
PROFILE_VIEW, FAVORITED, PROFILE_VISIBILITY_SPIKE, SEARCH_APPEARANCE

# Messages
NEW_MESSAGE, MESSAGE_READ, CONVERSATION_COLD

# PII
PII_REQUEST, PII_GRANTED, PII_DENIED, PII_EXPIRING, SUSPICIOUS_LOGIN

# Engagement
UNREAD_MESSAGES, NEW_USERS_MATCHING, PROFILE_INCOMPLETE, UPLOAD_PHOTOS
```

### Default Settings
```python
quietHours = QuietHours(
    enabled=True,
    start="22:00",
    end="08:00",
    timezone="UTC"
)

smsOptimization = SMSOptimization(
    verifiedUsersOnly=True,
    priorityOnly=False,
    costLimit=100.00,
    dailyLimit=10
)
```

### Endpoints
```
GET  /api/notifications/preferences
PUT  /api/notifications/preferences
POST /api/notifications/preferences/reset
POST /api/notifications/send
GET  /api/notifications/queue
GET  /api/notifications/analytics
```

---

## üìÖ SCHEDULER ARCHITECTURE

### CRITICAL: Dynamic Jobs Only

**Rules:**
1. ‚úÖ ALL jobs in `dynamic_jobs` collection (database)
2. ‚úÖ ONE scheduler: `unified_scheduler.py`
3. ‚ùå NO hardcoded jobs in code
4. ‚ùå NO Python `schedule` library for new jobs

### Architecture
```
Job Templates (code)
    ‚Üì
Job Instances (database)
    ‚Üì
Unified Scheduler (polls every 30s)
    ‚Üì
Job Executor (runs with templates)
    ‚Üì
Execution History (database)
```

### Job Templates
```python
# Location: /job_templates/
- base.py                    # Base template class
- registry.py                # Template registration
- database_cleanup.py        # Cleanup jobs
- data_export.py            # Export jobs
- email_notifier_template.py # Email notifications
- sms_notifier_template.py  # SMS notifications
- system_cleanup.py         # System maintenance
- ticket_cleanup.py         # Ticket cleanup
```

### Creating New Scheduled Jobs
1. Create template in `/job_templates/`
2. Register in `registry.py`
3. Create job via Dynamic Scheduler UI
4. Runs automatically via unified_scheduler

### UI Location
`http://localhost:3000/dynamic-scheduler`

---

## üé≠ UI/UX STANDARDS

### 1. Toast Notifications (MANDATORY) ‚ö†Ô∏è CRITICAL RULE

**‚õî ABSOLUTELY NEVER USE BROWSER NATIVE DIALOGS:**
- ‚ùå `alert()` - Use toast notifications
- ‚ùå `window.confirm()` - Use custom confirmation UI with toast feedback
- ‚ùå `prompt()` - Use inline input forms
- ‚ùå Any browser-native modal windows

**‚úÖ ALWAYS USE INSTEAD:**
- ‚úÖ Toast component (`/components/Toast.js`) for notifications
- ‚úÖ Custom modal components with proper styling for complex dialogs
- ‚úÖ Inline confirmation UI with undo options
- ‚úÖ Status badges and messages within the UI

```javascript
setToast({ message: 'Success!', type: 'success' });
setToast({ message: 'Error occurred', type: 'error' });
setToast({ message: 'Warning', type: 'warning' });
setToast({ message: 'Info', type: 'info' });
```

### 2. Protected Routes

**Pattern:**
```javascript
// ProtectedRoute.js checks:
1. User logged in? (localStorage has token)
2. User status active? (fetch from profile)
3. Allow own profile/preferences regardless of status
4. Block other features if not active
```

**Allowed regardless of status:**
```javascript
const isOwnProfile = location.pathname === `/profile/${username}`;
const isEditProfile = location.pathname === '/edit-profile';
const isPreferences = location.pathname === '/preferences';
const isNotifications = location.pathname === '/notifications';
```

### 3. Component Consistency

**Critical Pages MUST have identical:**
- `/l3v3l-matches` - SearchResultCard
- `/search` - SearchResultCard
- `/dashboard` - UserCard
- `/favorites` - SearchResultCard
- `/shortlist` - SearchResultCard

**Same on all pages:**
- Button styling (favorite ‚≠ê, shortlist ‚úìüìã, message üí¨)
- Icons usage
- Active/inactive states
- Hover effects
- Action handlers
- Modal behavior

### 4. Admin Table Headers

**Standard pattern:**
```css
.table-name thead {
  background: var(--primary-color) !important;
  color: white !important;
}

.table-name th {
  background: var(--primary-color) !important;
  color: white !important;  /* MUST be explicit */
}
```

---

## üß™ TESTING REQUIREMENTS

### Backend Tests
```python
# Location: /tests/
# Run: pytest
# Coverage: 70% minimum, 85% target

# Required tests:
- Unit tests for functions
- API endpoint tests (GET, POST, PUT, DELETE)
- Database operation tests
- Error handling tests
- Edge case tests
- Auth/authorization tests
```

### Frontend Tests
```javascript
// Location: /components/<Component>.test.js
// Run: npm test
// Coverage: 70% minimum

// Required tests:
- Component renders
- User interactions
- API call mocking
- State changes
- Conditional rendering
- Error states
```

### Test Template
```python
# Backend
def test_feature_success(test_client):
    response = test_client.get("/endpoint")
    assert response.status_code == 200

def test_feature_unauthorized(test_client):
    response = test_client.get("/endpoint")
    assert response.status_code == 401
```

---

## üîí SECURITY SETTINGS

### JWT Configuration
- **Secret Key:** MUST change in production
- **Algorithm:** HS256
- **Expiration:** 30 minutes (configurable)
- **Storage:** localStorage (frontend)

### Password Security
- **Hashing:** bcrypt
- **Max Length:** 72 bytes (bcrypt limit)
- **Validation:** Handled by PasswordManager

### CORS
- **Development:** localhost:3000, 3001
- **Production:** Set specific domains
- **Credentials:** Enabled (required for auth)

### PII Security
- **Masking:** Profile data masked for non-owners
- **Access Control:** Database-tracked permissions
- **Request Flow:** Request ‚Üí Approval ‚Üí Access grant

---

## üèóÔ∏è COMPONENT CONSISTENCY

### Critical Components
```
UserCard.js / UserCard.css
SearchResultCard.js / SearchPage.css
MessageModal.js
PIIRequestModal.js
DeleteButton.js / DeleteButton.css  # NEW - Reusable delete component
```

### Reusable DeleteButton (NEW - Oct 21, 2025)
**MANDATORY: Use DeleteButton for ALL delete actions**

```jsx
import DeleteButton from './DeleteButton';

<DeleteButton
  onDelete={() => deleteItem(id)}
  itemName="notification"
  size="medium"  // small | medium | large
/>
```

**Features:**
- ‚úÖ 2-click confirmation (no browser modals!)
- ‚úÖ Visual feedback (grows, turns red, pulses)
- ‚úÖ Auto-resets after 3 seconds
- ‚úÖ Fully accessible
- ‚úÖ Mobile-optimized

**Usage:** Notification queue, favorites, shortlist, messages, all delete actions

### Button States (ALL pages)
```css
/* Favorite - Active */
.btn-warning { gradient, glowing, scale(1.05) }

/* Favorite - Inactive */
.btn-outline-warning { transparent, dull, no glow }

/* Shortlist - Active */
.btn-info { gradient, glowing, scale(1.05) }

/* Shortlist - Inactive */
.btn-outline-info { transparent, dull, no glow }
```

### Icons (Consistent)
- Favorite: ‚≠ê (active) / ‚òÜ (inactive)
- Shortlist: ‚úìüìã (active) / üìã (inactive)
- Message: üí¨
- View: üëÅÔ∏è
- Exclude: üö´ (active) / ‚ùå (inactive)

---

## üìÅ FILE STRUCTURE

### Backend (`/fastapi_backend/`)
```
‚îú‚îÄ‚îÄ auth/                      # Authentication modules
‚îÇ   ‚îú‚îÄ‚îÄ jwt_auth.py           # PRIMARY AUTH ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ legacy_auth.py        # LEGACY (don't use)
‚îÇ   ‚îî‚îÄ‚îÄ security_config.py
‚îú‚îÄ‚îÄ models/                    # Pydantic models
‚îÇ   ‚îú‚îÄ‚îÄ user_models.py
‚îÇ   ‚îî‚îÄ‚îÄ notification_models.py
‚îú‚îÄ‚îÄ services/                  # Business logic
‚îÇ   ‚îú‚îÄ‚îÄ notification_service.py
‚îÇ   ‚îú‚îÄ‚îÄ job_registry.py
‚îÇ   ‚îî‚îÄ‚îÄ job_executor.py
‚îú‚îÄ‚îÄ routers/                   # Additional routers
‚îÇ   ‚îî‚îÄ‚îÄ notifications.py
‚îú‚îÄ‚îÄ job_templates/            # Scheduler templates
‚îú‚îÄ‚îÄ tests/                    # Test files
‚îú‚îÄ‚îÄ routes.py                 # Main routes
‚îú‚îÄ‚îÄ config.py                 # Global settings
‚îú‚îÄ‚îÄ main.py                   # App entry point
‚îî‚îÄ‚îÄ database.py               # DB connection
```

### Frontend (`/frontend/src/`)
```
‚îú‚îÄ‚îÄ components/               # React components
‚îÇ   ‚îú‚îÄ‚îÄ UserCard.js
‚îÇ   ‚îú‚îÄ‚îÄ SearchResultCard.js
‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.js
‚îÇ   ‚îú‚îÄ‚îÄ SearchPage.js
‚îÇ   ‚îî‚îÄ‚îÄ NotificationPreferences.js
‚îú‚îÄ‚îÄ themes/                   # Theme system
‚îÇ   ‚îî‚îÄ‚îÄ themes.css
‚îú‚îÄ‚îÄ api.js                    # API configuration
‚îî‚îÄ‚îÄ App.js                    # Main app
```

---

## üß≠ SIDEBAR NAVIGATION

### Simple Toggle Pattern (No Pin Feature)

**Toggle Button (in TopBar):**
- Positioned before "Matrimonial Profile" title
- 40x40px with rounded corners (35x35px on mobile)
- Semi-transparent white background with white border
- Shows hamburger icon (‚ò∞) always
- CSS class: `.sidebar-toggle-btn`

**State Management (in App.js):**
- Single `isSidebarCollapsed` state (starts as true/collapsed)
- Simple toggle function switches between open/closed
- No pin functionality - simpler and cleaner

**Sidebar Behavior:**
- Starts collapsed (left: -280px)
- Click hamburger to toggle open/closed (left: 0 when open)
- No overlay - sidebar stays open until toggled again
- No pin button - removed for simplicity
- Content doesn't shift - sidebar overlays content

**CSS Classes:**
- `.sidebar.open` when expanded
- Smooth transitions (0.3s ease)
- No pin-related styles
- No overlay styles

**Layout (Flexbox):**
```css
.app-wrapper { display: flex; }
.sidebar { position: relative; width: 0; }
.sidebar.open { width: 280px; }
.app-layout { flex: 1; }
```

**Responsive:**
- Desktop/Tablet: Sidebar pushes content using flexbox
- Mobile (<576px): Sidebar uses `position: fixed` to overlay

---

## üìä DASHBOARD FEATURES

### Landing Page After Login (8 Sections)

**My Activities (Can Remove):**
1. **My Messages** - Delete conversation (üóëÔ∏è button)
2. **My Favorites** - Remove from favorites (üíî button)
3. **My Shortlists** - Remove from shortlist (üì§ button)
4. **My Exclusions** - Unblock user (‚úÖ button)

**Others' Activities:**
5. **Profile Views** - Clear view history (üóëÔ∏è button)
6. **PII Requests** - Cancel request (‚ùå button)
7. **Their Favorites** - No remove (they control this)
8. **Their Shortlists** - No remove (they control this)

**Implementation:**
- Component: `/frontend/src/components/Dashboard.js`
- Remove handlers for each category with custom confirmation UI (NOT browser confirm!)
- `renderUserCard` accepts removeHandler and removeIcon parameters
- `renderSection` passes handlers to cards
- UI shows 3 action buttons per card: Message (üí¨), View (üëÅÔ∏è), Remove (varies)
- **Custom confirmation component** before any remove action (NOT `window.confirm()`)
- Dashboard updates immediately after successful removal with toast notification
- Responsive grid layout maintained

**Remove Handlers:**
```javascript
handleRemoveFromFavorites()  // DELETE /favorites/{target}
handleRemoveFromShortlist()  // DELETE /shortlist/{target}
handleRemoveFromExclusions() // DELETE /exclusions/{target}
handleDeleteMessage()        // UI only (needs backend)
handleClearViewHistory()     // UI only (needs backend)
handleCancelPIIRequest()     // UI only (needs backend)
```

---

## üö® COMMON MISTAKES TO AVOID

### Authentication
‚ùå Using `from auth import get_current_user`
‚ùå Type hint `TokenData` instead of `dict`
‚ùå Accessing `current_user.username` instead of `current_user["username"]`

### Theme
‚ùå Hardcoded colors: `#667eea`
‚ùå Using `@media (prefers-color-scheme: dark)`
‚ùå Forgetting `var(--primary-color)`

### Scheduler
‚ùå Adding hardcoded jobs in unified_scheduler.py
‚ùå Using Python `schedule` library
‚ùå Multiple scheduler instances

### UI/UX
‚ùå Using `alert()` or `window.confirm()`
‚ùå Inconsistent button styles across pages
‚ùå Different icons for same action

### API
‚ùå Forgetting auth interceptor for custom API instances
‚ùå Not handling 401 errors properly
‚ùå Mixing different auth systems

---

## üìã PRE-COMMIT CHECKLIST

Before ANY code change:

### Authentication
- [ ] Using correct auth import from `jwt_auth.py`?
- [ ] Type hint is `dict` not `TokenData`?
- [ ] Accessing with `["username"]` not `.username`?

### Theme
- [ ] All colors use CSS variables?
- [ ] No hardcoded hex colors (#...)?
- [ ] Tested in all 5 themes?

### Tests
- [ ] Tests written for new features?
- [ ] Backend tests cover success + error cases?
- [ ] Frontend tests cover interactions?

### Consistency
- [ ] If changing cards, updated BOTH UserCard AND SearchResultCard?
- [ ] Button styles identical across all pages?
- [ ] Icons consistent everywhere?

### UI/UX
- [ ] NO `alert()`, `confirm()`, or `prompt()` used?
- [ ] Using toast notifications for feedback?
- [ ] Custom confirmation UI (NOT browser dialogs)?

### Documentation
- [ ] Updated relevant .md files?
- [ ] Added comments for complex logic?
- [ ] Updated API documentation?

---

## üéØ QUICK REFERENCE

### When Adding New Protected Endpoint
1. Copy auth import from `routes.py` line 24
2. Use `current_user: dict = Depends(get_current_user)`
3. Access with `current_user["username"]`
4. Test with logged-in user

### When Adding New UI Component
1. Use theme variables for ALL colors
2. Test in all 5 themes
3. Use Toast for notifications
4. Write component tests

### When Adding Scheduled Job
1. Create template in `/job_templates/`
2. Register in `registry.py`
3. Create job via Dynamic Scheduler UI
4. Test execution

### When Fixing Auth Issues
1. Check which `get_current_user` is imported
2. Verify token in localStorage
3. Check token expiration
4. Confirm backend is using correct auth

---

## üìû TROUBLESHOOTING GUIDE

### 401 Unauthorized
- Check: Token expired?
- Check: Using correct auth function?
- Check: Token in Authorization header?
- Check: Secret key matches?

### 404 Not Found
- Check: Route registered in main.py?
- Check: Correct baseURL in frontend?
- Check: API prefix matches?

### Theme Not Working
- Check: Using CSS variables?
- Check: All 5 themes have the variable?
- Check: Theme class on document root?

### Scheduler Not Running
- Check: Job in `dynamic_jobs` collection?
- Check: Job enabled?
- Check: `nextRunAt` is in past?
- Check: unified_scheduler running?

---

## üîÑ RECENT UPDATES

### October 21, 2025 - Admin Settings Consolidation
- **Change:** Merged `/admin/settings` into `/preferences`
- **Implementation:** Added 3rd tab "System Config" in UnifiedPreferences
- **Files Changed:**
  - `/components/UnifiedPreferences.js` - Added admin tab
  - `/components/Sidebar.js` - Removed System Config menu item
  - `/components/Preferences.js` ‚Üí `.toberemoved`
  - `/components/Preferences.css` ‚Üí `.toberemoved`
- **Result:** All settings now in one consolidated page

### October 21, 2025 - File Management Protocol
- **New Rule:** Never delete replaced files immediately
- **Protocol:** Rename with `.toberemoved` extension
- **Benefit:** User can review for functionality discrepancies
- **Command:** `find . -name "*.toberemoved"` to list all

### October 20, 2025 - Authentication Integration Bug
- **Issue:** Notifications using wrong auth function
- **Fix:** Changed to `jwt_auth.get_current_user_dependency`
- **Files:** `/routers/notifications.py`

### October 20, 2025 - Notification 500 Error
- **Issue:** QuietHours missing required fields
- **Fix:** Added default values in model and service
- **Files:** `/models/notification_models.py`, `/services/notification_service.py`

### October 20, 2025 - Import Conflicts
- **Issue:** Both `models.py` and `models/` directory existed
- **Fix:** Renamed to `user_models.py`, created `__init__.py`
- **Files:** `/models/`

---

## üíæ VERSION INFO

- **Last Updated:** October 21, 2025, 9:36 AM
- **App Version:** 1.0.0
- **Python:** 3.12
- **FastAPI:** Latest
- **React:** Latest
- **MongoDB:** 7.x
- **Node:** 18+

---

## üìù NOTES

This document captures the GLOBAL settings and patterns that MUST be followed.
When in doubt, refer to this document.
When updating, keep this document in sync.

**Primary Reference Files:**
- `/fastapi_backend/routes.py` (line 24) - Auth pattern
- `/fastapi_backend/config.py` - Global config
- `/frontend/src/themes/themes.css` - Theme variables
- `/fastapi_backend/routers/notifications.py` - Recent auth fix example

**Memory Tags:**
#global-settings #authentication #configuration #theme #api-patterns 
#notifications #scheduler #ui-ux #testing #security #consistency
#file-management #admin-settings #sidebar #dashboard

---

## üìå QUICK SUMMARY

**What This Document Contains:**
- ‚úÖ 16 major sections covering all critical app patterns
- ‚úÖ File management protocol (NEW - Oct 21, 2025)
- ‚úÖ Admin settings consolidation (NEW - Oct 21, 2025)
- ‚úÖ Single authentication system (MANDATORY)
- ‚úÖ Theme system (7 themes including Ultra Black)
- ‚úÖ Component consistency rules (5 pages)
- ‚úÖ Toast notifications (NO browser alerts)
- ‚úÖ Testing requirements (85%+ coverage)
- ‚úÖ Scheduler architecture (Dynamic jobs)
- ‚úÖ Troubleshooting guides

**Total Lines:** 900+  
**Last Full Update:** October 21, 2025, 9:36 AM  
**Maintained By:** AI Assistant (Cascade)  

**Usage:**
Reference this file before making ANY code changes.
Update this file when new patterns/rules are established.
Share with team members for consistency.

---

END OF MEMORY DUMP
